
lufa_hid_device_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  00001a28  00001abc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080023e  0080023e  00001bfa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001bfa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00001c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000527d  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013ee  00000000  00000000  0000719b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002906  00000000  00000000  00008589  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ba4  00000000  00000000  0000ae90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002036  00000000  00000000  0000ba34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004338  00000000  00000000  0000da6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d88  00000000  00000000  00011da2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b0 00 	jmp	0x160	; 0x160 <__ctors_end>
       4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
       8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
       c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      28:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <__vector_10>
      2c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      68:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      6c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      70:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      78:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      7c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      80:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      84:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      88:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      8c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      90:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      94:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      98:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      9c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      a0:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      a4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      a8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
      ac:	ad 07       	cpc	r26, r29
      ae:	d6 07       	cpc	r29, r22
      b0:	c9 08       	sbc	r12, r9
      b2:	d6 07       	cpc	r29, r22
      b4:	c9 08       	sbc	r12, r9
      b6:	16 08       	sbc	r1, r6
      b8:	3a 08       	sbc	r3, r10
      ba:	c9 08       	sbc	r12, r9
      bc:	94 08       	sbc	r9, r4
      be:	a5 08       	sbc	r10, r5

000000c0 <ProductString>:
      c0:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
      d0:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
      e0:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

000000ee <ManufacturerString>:
      ee:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fe:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000108 <LanguageString>:
     108:	04 03 09 04                                         ....

0000010c <ConfigurationDescriptor>:
     10c:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
     11c:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
     12c:	00 05                                               ..

0000012e <DeviceDescriptor>:
     12e:	12 01 10 01 00 00 00 08 eb 03 02 24 01 00 01 02     ...........$....
     13e:	00 01                                               ..

00000140 <GenericReport>:
     140:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
     150:	08 81 02 09 03 15 00 25 ff 75 08 95 08 91 02 c0     .......%.u......

00000160 <__ctors_end>:
     160:	11 24       	eor	r1, r1
     162:	1f be       	out	0x3f, r1	; 63
     164:	cf ef       	ldi	r28, 0xFF	; 255
     166:	da e0       	ldi	r29, 0x0A	; 10
     168:	de bf       	out	0x3e, r29	; 62
     16a:	cd bf       	out	0x3d, r28	; 61

0000016c <__do_copy_data>:
     16c:	12 e0       	ldi	r17, 0x02	; 2
     16e:	a0 e0       	ldi	r26, 0x00	; 0
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	e8 e2       	ldi	r30, 0x28	; 40
     174:	fa e1       	ldi	r31, 0x1A	; 26
     176:	02 c0       	rjmp	.+4      	; 0x17c <__do_copy_data+0x10>
     178:	05 90       	lpm	r0, Z+
     17a:	0d 92       	st	X+, r0
     17c:	ae 33       	cpi	r26, 0x3E	; 62
     17e:	b1 07       	cpc	r27, r17
     180:	d9 f7       	brne	.-10     	; 0x178 <__do_copy_data+0xc>

00000182 <__do_clear_bss>:
     182:	22 e0       	ldi	r18, 0x02	; 2
     184:	ae e3       	ldi	r26, 0x3E	; 62
     186:	b2 e0       	ldi	r27, 0x02	; 2
     188:	01 c0       	rjmp	.+2      	; 0x18c <.do_clear_bss_start>

0000018a <.do_clear_bss_loop>:
     18a:	1d 92       	st	X+, r1

0000018c <.do_clear_bss_start>:
     18c:	aa 35       	cpi	r26, 0x5A	; 90
     18e:	b2 07       	cpc	r27, r18
     190:	e1 f7       	brne	.-8      	; 0x18a <.do_clear_bss_loop>
     192:	0e 94 06 0a 	call	0x140c	; 0x140c <main>
     196:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <_exit>

0000019a <__bad_interrupt>:
     19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000019e <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     19e:	29 2f       	mov	r18, r25
     1a0:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     1a2:	23 30       	cpi	r18, 0x03	; 3
     1a4:	31 05       	cpc	r19, r1
     1a6:	c9 f0       	breq	.+50     	; 0x1da <CALLBACK_USB_GetDescriptor+0x3c>
     1a8:	44 f4       	brge	.+16     	; 0x1ba <CALLBACK_USB_GetDescriptor+0x1c>
     1aa:	21 30       	cpi	r18, 0x01	; 1
     1ac:	31 05       	cpc	r19, r1
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <CALLBACK_USB_GetDescriptor+0x14>
     1b0:	39 c0       	rjmp	.+114    	; 0x224 <CALLBACK_USB_GetDescriptor+0x86>
     1b2:	22 30       	cpi	r18, 0x02	; 2
     1b4:	31 05       	cpc	r19, r1
     1b6:	61 f0       	breq	.+24     	; 0x1d0 <CALLBACK_USB_GetDescriptor+0x32>
     1b8:	06 c0       	rjmp	.+12     	; 0x1c6 <CALLBACK_USB_GetDescriptor+0x28>
     1ba:	21 32       	cpi	r18, 0x21	; 33
     1bc:	31 05       	cpc	r19, r1
     1be:	41 f1       	breq	.+80     	; 0x210 <CALLBACK_USB_GetDescriptor+0x72>
     1c0:	22 32       	cpi	r18, 0x22	; 34
     1c2:	31 05       	cpc	r19, r1
     1c4:	51 f1       	breq	.+84     	; 0x21a <CALLBACK_USB_GetDescriptor+0x7c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     1ca:	20 e0       	ldi	r18, 0x00	; 0
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	33 c0       	rjmp	.+102    	; 0x236 <CALLBACK_USB_GetDescriptor+0x98>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     1d0:	82 e2       	ldi	r24, 0x22	; 34
     1d2:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     1d4:	2c e0       	ldi	r18, 0x0C	; 12
     1d6:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <CALLBACK_USB_GetDescriptor+0x98>
     1da:	99 27       	eor	r25, r25
		case DTYPE_String:
			switch (DescriptorNumber)
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	91 05       	cpc	r25, r1
     1e0:	59 f0       	breq	.+22     	; 0x1f8 <CALLBACK_USB_GetDescriptor+0x5a>
     1e2:	82 30       	cpi	r24, 0x02	; 2
     1e4:	91 05       	cpc	r25, r1
     1e6:	71 f0       	breq	.+28     	; 0x204 <CALLBACK_USB_GetDescriptor+0x66>
     1e8:	89 2b       	or	r24, r25
     1ea:	09 f5       	brne	.+66     	; 0x22e <CALLBACK_USB_GetDescriptor+0x90>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     1ec:	e8 e0       	ldi	r30, 0x08	; 8
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
     1f0:	84 91       	lpm	r24, Z
     1f2:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     1f4:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     1f6:	1f c0       	rjmp	.+62     	; 0x236 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     1f8:	ee ee       	ldi	r30, 0xEE	; 238
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	84 91       	lpm	r24, Z
     1fe:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     200:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     202:	19 c0       	rjmp	.+50     	; 0x236 <CALLBACK_USB_GetDescriptor+0x98>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     204:	e0 ec       	ldi	r30, 0xC0	; 192
     206:	f0 e0       	ldi	r31, 0x00	; 0
     208:	84 91       	lpm	r24, Z
     20a:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     20c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     20e:	13 c0       	rjmp	.+38     	; 0x236 <CALLBACK_USB_GetDescriptor+0x98>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     210:	89 e0       	ldi	r24, 0x09	; 9
     212:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
     214:	2e e1       	ldi	r18, 0x1E	; 30
     216:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     218:	0e c0       	rjmp	.+28     	; 0x236 <CALLBACK_USB_GetDescriptor+0x98>
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
     21a:	80 e2       	ldi	r24, 0x20	; 32
     21c:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
     21e:	20 e4       	ldi	r18, 0x40	; 64
     220:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(GenericReport);
			break;
     222:	09 c0       	rjmp	.+18     	; 0x236 <CALLBACK_USB_GetDescriptor+0x98>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     224:	82 e1       	ldi	r24, 0x12	; 18
     226:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     228:	2e e2       	ldi	r18, 0x2E	; 46
     22a:	31 e0       	ldi	r19, 0x01	; 1
     22c:	04 c0       	rjmp	.+8      	; 0x236 <CALLBACK_USB_GetDescriptor+0x98>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     232:	20 e0       	ldi	r18, 0x00	; 0
     234:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
     236:	fa 01       	movw	r30, r20
     238:	31 83       	std	Z+1, r19	; 0x01
     23a:	20 83       	st	Z, r18
	return Size;
}
     23c:	08 95       	ret

0000023e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     23e:	3f 92       	push	r3
     240:	4f 92       	push	r4
     242:	5f 92       	push	r5
     244:	6f 92       	push	r6
     246:	7f 92       	push	r7
     248:	8f 92       	push	r8
     24a:	9f 92       	push	r9
     24c:	af 92       	push	r10
     24e:	bf 92       	push	r11
     250:	cf 92       	push	r12
     252:	df 92       	push	r13
     254:	ef 92       	push	r14
     256:	ff 92       	push	r15
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	00 d0       	rcall	.+0      	; 0x262 <HID_Device_ProcessControlRequest+0x24>
     262:	1f 92       	push	r1
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
     26a:	ed b6       	in	r14, 0x3d	; 61
     26c:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     26e:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
     272:	83 ff       	sbrs	r24, 3
     274:	1c c1       	rjmp	.+568    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
     276:	f6 01       	movw	r30, r12
     278:	80 81       	ld	r24, Z
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	20 91 50 02 	lds	r18, 0x0250
     280:	30 91 51 02 	lds	r19, 0x0251
     284:	28 17       	cp	r18, r24
     286:	39 07       	cpc	r19, r25
     288:	09 f0       	breq	.+2      	; 0x28c <HID_Device_ProcessControlRequest+0x4e>
     28a:	11 c1       	rjmp	.+546    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
	  return;

	switch (USB_ControlRequest.bRequest)
     28c:	80 91 4d 02 	lds	r24, 0x024D
     290:	83 30       	cpi	r24, 0x03	; 3
     292:	09 f4       	brne	.+2      	; 0x296 <HID_Device_ProcessControlRequest+0x58>
     294:	a5 c0       	rjmp	.+330    	; 0x3e0 <HID_Device_ProcessControlRequest+0x1a2>
     296:	30 f4       	brcc	.+12     	; 0x2a4 <HID_Device_ProcessControlRequest+0x66>
     298:	81 30       	cpi	r24, 0x01	; 1
     29a:	71 f0       	breq	.+28     	; 0x2b8 <HID_Device_ProcessControlRequest+0x7a>
     29c:	82 30       	cpi	r24, 0x02	; 2
     29e:	09 f4       	brne	.+2      	; 0x2a2 <HID_Device_ProcessControlRequest+0x64>
     2a0:	ea c0       	rjmp	.+468    	; 0x476 <HID_Device_ProcessControlRequest+0x238>
     2a2:	05 c1       	rjmp	.+522    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
     2a4:	8a 30       	cpi	r24, 0x0A	; 10
     2a6:	09 f4       	brne	.+2      	; 0x2aa <HID_Device_ProcessControlRequest+0x6c>
     2a8:	c9 c0       	rjmp	.+402    	; 0x43c <HID_Device_ProcessControlRequest+0x1fe>
     2aa:	8b 30       	cpi	r24, 0x0B	; 11
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <HID_Device_ProcessControlRequest+0x72>
     2ae:	b1 c0       	rjmp	.+354    	; 0x412 <HID_Device_ProcessControlRequest+0x1d4>
     2b0:	89 30       	cpi	r24, 0x09	; 9
     2b2:	09 f0       	breq	.+2      	; 0x2b6 <HID_Device_ProcessControlRequest+0x78>
     2b4:	fc c0       	rjmp	.+504    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
     2b6:	54 c0       	rjmp	.+168    	; 0x360 <HID_Device_ProcessControlRequest+0x122>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     2b8:	80 91 4c 02 	lds	r24, 0x024C
     2bc:	81 3a       	cpi	r24, 0xA1	; 161
     2be:	09 f0       	breq	.+2      	; 0x2c2 <HID_Device_ProcessControlRequest+0x84>
     2c0:	f6 c0       	rjmp	.+492    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
     2c2:	8d b6       	in	r8, 0x3d	; 61
     2c4:	9e b6       	in	r9, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
     2c6:	1a 82       	std	Y+2, r1	; 0x02
     2c8:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     2ca:	ee e4       	ldi	r30, 0x4E	; 78
     2cc:	f2 e0       	ldi	r31, 0x02	; 2
     2ce:	80 81       	ld	r24, Z
     2d0:	11 81       	ldd	r17, Z+1	; 0x01
     2d2:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     2d4:	f6 01       	movw	r30, r12
     2d6:	40 85       	ldd	r20, Z+8	; 0x08
     2d8:	50 e0       	ldi	r21, 0x00	; 0
     2da:	8d b7       	in	r24, 0x3d	; 61
     2dc:	9e b7       	in	r25, 0x3e	; 62
     2de:	84 1b       	sub	r24, r20
     2e0:	95 0b       	sbc	r25, r21
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	9e bf       	out	0x3e, r25	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	8d bf       	out	0x3d, r24	; 61
     2ec:	ed b7       	in	r30, 0x3d	; 61
     2ee:	fe b7       	in	r31, 0x3e	; 62
     2f0:	31 96       	adiw	r30, 0x01	; 1
     2f2:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	70 e0       	ldi	r23, 0x00	; 0
     2f8:	cf 01       	movw	r24, r30
     2fa:	0e 94 48 0a 	call	0x1490	; 0x1490 <memset>
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     2fe:	4f ef       	ldi	r20, 0xFF	; 255
     300:	41 0f       	add	r20, r17
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
     302:	8e 01       	movw	r16, r28
     304:	0f 5f       	subi	r16, 0xFF	; 255
     306:	1f 4f       	sbci	r17, 0xFF	; 255
     308:	95 01       	movw	r18, r10
     30a:	be 01       	movw	r22, r28
     30c:	6d 5f       	subi	r22, 0xFD	; 253
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	c6 01       	movw	r24, r12
     312:	0e 94 82 09 	call	0x1304	; 0x1304 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     316:	f6 01       	movw	r30, r12
     318:	86 81       	ldd	r24, Z+6	; 0x06
     31a:	97 81       	ldd	r25, Z+7	; 0x07
     31c:	00 97       	sbiw	r24, 0x00	; 0
     31e:	29 f0       	breq	.+10     	; 0x32a <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
     320:	40 85       	ldd	r20, Z+8	; 0x08
     322:	50 e0       	ldi	r21, 0x00	; 0
     324:	b5 01       	movw	r22, r10
     326:	0e 94 3f 0a 	call	0x147e	; 0x147e <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     32a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     32e:	e8 ee       	ldi	r30, 0xE8	; 232
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	87 7f       	andi	r24, 0xF7	; 247
     336:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     33c:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
     340:	69 81       	ldd	r22, Y+1	; 0x01
     342:	7a 81       	ldd	r23, Y+2	; 0x02
     344:	c5 01       	movw	r24, r10
     346:	0e 94 a8 03 	call	0x750	; 0x750 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     34a:	e8 ee       	ldi	r30, 0xE8	; 232
     34c:	f0 e0       	ldi	r31, 0x00	; 0
     34e:	80 81       	ld	r24, Z
     350:	8b 77       	andi	r24, 0x7B	; 123
     352:	80 83       	st	Z, r24
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	9e be       	out	0x3e, r9	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	8d be       	out	0x3d, r8	; 61
     35e:	a7 c0       	rjmp	.+334    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     360:	80 91 4c 02 	lds	r24, 0x024C
     364:	81 32       	cpi	r24, 0x21	; 33
     366:	09 f0       	breq	.+2      	; 0x36a <HID_Device_ProcessControlRequest+0x12c>
     368:	a2 c0       	rjmp	.+324    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
     36a:	6d b6       	in	r6, 0x3d	; 61
     36c:	7e b6       	in	r7, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
     36e:	a0 90 52 02 	lds	r10, 0x0252
     372:	b0 90 53 02 	lds	r11, 0x0253
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
     376:	ee e4       	ldi	r30, 0x4E	; 78
     378:	f2 e0       	ldi	r31, 0x02	; 2
     37a:	50 80       	ld	r5, Z
     37c:	41 80       	ldd	r4, Z+1	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
     37e:	8d b7       	in	r24, 0x3d	; 61
     380:	9e b7       	in	r25, 0x3e	; 62
     382:	8a 19       	sub	r24, r10
     384:	9b 09       	sbc	r25, r11
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	9e bf       	out	0x3e, r25	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	8d bf       	out	0x3d, r24	; 61
     390:	ed b7       	in	r30, 0x3d	; 61
     392:	fe b7       	in	r31, 0x3e	; 62
     394:	31 96       	adiw	r30, 0x01	; 1
     396:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     398:	08 ee       	ldi	r16, 0xE8	; 232
     39a:	10 e0       	ldi	r17, 0x00	; 0
     39c:	f8 01       	movw	r30, r16
     39e:	80 81       	ld	r24, Z
     3a0:	87 7f       	andi	r24, 0xF7	; 247
     3a2:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
     3a4:	b5 01       	movw	r22, r10
     3a6:	c4 01       	movw	r24, r8
     3a8:	0e 94 2d 04 	call	0x85a	; 0x85a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3ac:	f8 01       	movw	r30, r16
     3ae:	80 81       	ld	r24, Z
     3b0:	8e 77       	andi	r24, 0x7E	; 126
     3b2:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	51 10       	cpse	r5, r1
     3b8:	01 c0       	rjmp	.+2      	; 0x3bc <HID_Device_ProcessControlRequest+0x17e>
     3ba:	20 e0       	ldi	r18, 0x00	; 0
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	85 01       	movw	r16, r10
     3c0:	02 1b       	sub	r16, r18
     3c2:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
     3c4:	28 0d       	add	r18, r8
     3c6:	39 1d       	adc	r19, r9
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
     3c8:	4f ef       	ldi	r20, 0xFF	; 255
     3ca:	44 0d       	add	r20, r4

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
     3cc:	65 2d       	mov	r22, r5
     3ce:	c6 01       	movw	r24, r12
     3d0:	0e 94 c7 09 	call	0x138e	; 0x138e <CALLBACK_HID_Device_ProcessHIDReport>
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	7e be       	out	0x3e, r7	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	6d be       	out	0x3d, r6	; 61
     3de:	67 c0       	rjmp	.+206    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     3e0:	80 91 4c 02 	lds	r24, 0x024C
     3e4:	81 3a       	cpi	r24, 0xA1	; 161
     3e6:	09 f0       	breq	.+2      	; 0x3ea <HID_Device_ProcessControlRequest+0x1ac>
     3e8:	62 c0       	rjmp	.+196    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     3ea:	e8 ee       	ldi	r30, 0xE8	; 232
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	87 7f       	andi	r24, 0xF7	; 247
     3f2:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     3f4:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     3f6:	80 ff       	sbrs	r24, 0
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <HID_Device_ProcessControlRequest+0x1b6>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
     3fa:	f6 01       	movw	r30, r12
     3fc:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3fe:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     402:	e8 ee       	ldi	r30, 0xE8	; 232
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	8e 77       	andi	r24, 0x7E	; 126
     40a:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     40c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>
     410:	4e c0       	rjmp	.+156    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     412:	80 91 4c 02 	lds	r24, 0x024C
     416:	81 32       	cpi	r24, 0x21	; 33
     418:	09 f0       	breq	.+2      	; 0x41c <HID_Device_ProcessControlRequest+0x1de>
     41a:	49 c0       	rjmp	.+146    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     41c:	e8 ee       	ldi	r30, 0xE8	; 232
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	80 81       	ld	r24, Z
     422:	87 7f       	andi	r24, 0xF7	; 247
     424:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     426:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
     42a:	90 91 4e 02 	lds	r25, 0x024E
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	91 11       	cpse	r25, r1
     432:	01 c0       	rjmp	.+2      	; 0x436 <HID_Device_ProcessControlRequest+0x1f8>
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	f6 01       	movw	r30, r12
     438:	81 87       	std	Z+9, r24	; 0x09
     43a:	39 c0       	rjmp	.+114    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     43c:	80 91 4c 02 	lds	r24, 0x024C
     440:	81 32       	cpi	r24, 0x21	; 33
     442:	a9 f5       	brne	.+106    	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
     444:	e8 ee       	ldi	r30, 0xE8	; 232
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	87 7f       	andi	r24, 0xF7	; 247
     44c:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     44e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
     452:	80 91 4e 02 	lds	r24, 0x024E
     456:	90 91 4f 02 	lds	r25, 0x024F
     45a:	88 27       	eor	r24, r24
     45c:	00 24       	eor	r0, r0
     45e:	88 0f       	add	r24, r24
     460:	99 1f       	adc	r25, r25
     462:	00 1c       	adc	r0, r0
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	00 1c       	adc	r0, r0
     46a:	89 2f       	mov	r24, r25
     46c:	90 2d       	mov	r25, r0
     46e:	f6 01       	movw	r30, r12
     470:	95 87       	std	Z+13, r25	; 0x0d
     472:	84 87       	std	Z+12, r24	; 0x0c
     474:	1c c0       	rjmp	.+56     	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     476:	80 91 4c 02 	lds	r24, 0x024C
     47a:	81 3a       	cpi	r24, 0xA1	; 161
     47c:	c1 f4       	brne	.+48     	; 0x4ae <HID_Device_ProcessControlRequest+0x270>
     47e:	e8 ee       	ldi	r30, 0xE8	; 232
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	80 81       	ld	r24, Z
     484:	87 7f       	andi	r24, 0xF7	; 247
     486:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     488:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
     48a:	80 ff       	sbrs	r24, 0
     48c:	fd cf       	rjmp	.-6      	; 0x488 <HID_Device_ProcessControlRequest+0x24a>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
     48e:	f6 01       	movw	r30, r12
     490:	84 85       	ldd	r24, Z+12	; 0x0c
     492:	95 85       	ldd	r25, Z+13	; 0x0d
     494:	96 95       	lsr	r25
     496:	87 95       	ror	r24
     498:	96 95       	lsr	r25
     49a:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     49c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4a0:	e8 ee       	ldi	r30, 0xE8	; 232
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	8e 77       	andi	r24, 0x7E	; 126
     4a8:	80 83       	st	Z, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     4aa:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	fe be       	out	0x3e, r15	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	ed be       	out	0x3d, r14	; 61
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	df 90       	pop	r13
     4cc:	cf 90       	pop	r12
     4ce:	bf 90       	pop	r11
     4d0:	af 90       	pop	r10
     4d2:	9f 90       	pop	r9
     4d4:	8f 90       	pop	r8
     4d6:	7f 90       	pop	r7
     4d8:	6f 90       	pop	r6
     4da:	5f 90       	pop	r5
     4dc:	4f 90       	pop	r4
     4de:	3f 90       	pop	r3
     4e0:	08 95       	ret

000004e2 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
     4e2:	fc 01       	movw	r30, r24
     4e4:	39 96       	adiw	r30, 0x09	; 9
     4e6:	27 e0       	ldi	r18, 0x07	; 7
     4e8:	df 01       	movw	r26, r30
     4ea:	1d 92       	st	X+, r1
     4ec:	2a 95       	dec	r18
     4ee:	e9 f7       	brne	.-6      	; 0x4ea <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
     4f0:	21 e0       	ldi	r18, 0x01	; 1
     4f2:	fc 01       	movw	r30, r24
     4f4:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
     4f6:	24 ef       	ldi	r18, 0xF4	; 244
     4f8:	31 e0       	ldi	r19, 0x01	; 1
     4fa:	35 87       	std	Z+13, r19	; 0x0d
     4fc:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
     4fe:	23 e0       	ldi	r18, 0x03	; 3
     500:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
     502:	61 e0       	ldi	r22, 0x01	; 1
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	0e 94 94 05 	call	0xb28	; 0xb28 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
     50a:	08 95       	ret

0000050c <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
     50c:	5f 92       	push	r5
     50e:	6f 92       	push	r6
     510:	7f 92       	push	r7
     512:	8f 92       	push	r8
     514:	9f 92       	push	r9
     516:	af 92       	push	r10
     518:	bf 92       	push	r11
     51a:	cf 92       	push	r12
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	00 d0       	rcall	.+0      	; 0x52c <HID_Device_USBTask+0x20>
     52c:	1f 92       	push	r1
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
     534:	cd b6       	in	r12, 0x3d	; 61
     536:	de b6       	in	r13, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
     538:	80 91 4b 02 	lds	r24, 0x024B
     53c:	84 30       	cpi	r24, 0x04	; 4
     53e:	09 f0       	breq	.+2      	; 0x542 <HID_Device_USBTask+0x36>
     540:	8f c0       	rjmp	.+286    	; 0x660 <HID_Device_USBTask+0x154>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     542:	80 91 e4 00 	lds	r24, 0x00E4
     546:	90 91 e5 00 	lds	r25, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
     54a:	f7 01       	movw	r30, r14
     54c:	22 85       	ldd	r18, Z+10	; 0x0a
     54e:	33 85       	ldd	r19, Z+11	; 0x0b
     550:	28 17       	cp	r18, r24
     552:	39 07       	cpc	r19, r25
     554:	09 f4       	brne	.+2      	; 0x558 <HID_Device_USBTask+0x4c>
     556:	84 c0       	rjmp	.+264    	; 0x660 <HID_Device_USBTask+0x154>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     558:	81 81       	ldd	r24, Z+1	; 0x01
     55a:	8f 70       	andi	r24, 0x0F	; 15
     55c:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     560:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
     564:	85 ff       	sbrs	r24, 5
     566:	7c c0       	rjmp	.+248    	; 0x660 <HID_Device_USBTask+0x154>
     568:	8d b6       	in	r8, 0x3d	; 61
     56a:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
     56c:	40 85       	ldd	r20, Z+8	; 0x08
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	8d b7       	in	r24, 0x3d	; 61
     572:	9e b7       	in	r25, 0x3e	; 62
     574:	84 1b       	sub	r24, r20
     576:	95 0b       	sbc	r25, r21
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	9e bf       	out	0x3e, r25	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	8d bf       	out	0x3d, r24	; 61
     582:	ed b7       	in	r30, 0x3d	; 61
     584:	fe b7       	in	r31, 0x3e	; 62
     586:	31 96       	adiw	r30, 0x01	; 1
     588:	5f 01       	movw	r10, r30
		uint8_t  ReportID     = 0;
     58a:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
     58c:	1a 82       	std	Y+2, r1	; 0x02
     58e:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	cf 01       	movw	r24, r30
     596:	0e 94 48 0a 	call	0x1490	; 0x1490 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
     59a:	8e 01       	movw	r16, r28
     59c:	0f 5f       	subi	r16, 0xFF	; 255
     59e:	1f 4f       	sbci	r17, 0xFF	; 255
     5a0:	95 01       	movw	r18, r10
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	be 01       	movw	r22, r28
     5a6:	6d 5f       	subi	r22, 0xFD	; 253
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	c7 01       	movw	r24, r14
     5ac:	0e 94 82 09 	call	0x1304	; 0x1304 <CALLBACK_HID_Device_CreateHIDReport>
     5b0:	68 2e       	mov	r6, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
     5b2:	f7 01       	movw	r30, r14
     5b4:	24 85       	ldd	r18, Z+12	; 0x0c
     5b6:	35 85       	ldd	r19, Z+13	; 0x0d
     5b8:	23 2b       	or	r18, r19
     5ba:	41 f0       	breq	.+16     	; 0x5cc <HID_Device_USBTask+0xc0>
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	86 85       	ldd	r24, Z+14	; 0x0e
     5c0:	97 85       	ldd	r25, Z+15	; 0x0f
     5c2:	89 2b       	or	r24, r25
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <HID_Device_USBTask+0xbc>
     5c6:	20 e0       	ldi	r18, 0x00	; 0
     5c8:	52 2e       	mov	r5, r18
     5ca:	01 c0       	rjmp	.+2      	; 0x5ce <HID_Device_USBTask+0xc2>
     5cc:	51 2c       	mov	r5, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
     5ce:	f7 01       	movw	r30, r14
     5d0:	06 81       	ldd	r16, Z+6	; 0x06
     5d2:	17 81       	ldd	r17, Z+7	; 0x07
     5d4:	01 15       	cp	r16, r1
     5d6:	11 05       	cpc	r17, r1
     5d8:	99 f0       	breq	.+38     	; 0x600 <HID_Device_USBTask+0xf4>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
     5da:	49 81       	ldd	r20, Y+1	; 0x01
     5dc:	5a 81       	ldd	r21, Y+2	; 0x02
     5de:	b8 01       	movw	r22, r16
     5e0:	c5 01       	movw	r24, r10
     5e2:	0e 94 32 0a 	call	0x1464	; 0x1464 <memcmp>
     5e6:	77 24       	eor	r7, r7
     5e8:	73 94       	inc	r7
     5ea:	89 2b       	or	r24, r25
     5ec:	09 f4       	brne	.+2      	; 0x5f0 <HID_Device_USBTask+0xe4>
     5ee:	71 2c       	mov	r7, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
     5f0:	f7 01       	movw	r30, r14
     5f2:	40 85       	ldd	r20, Z+8	; 0x08
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	b5 01       	movw	r22, r10
     5f8:	c8 01       	movw	r24, r16
     5fa:	0e 94 3f 0a 	call	0x147e	; 0x147e <memcpy>
     5fe:	01 c0       	rjmp	.+2      	; 0x602 <HID_Device_USBTask+0xf6>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
     600:	71 2c       	mov	r7, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
     602:	29 81       	ldd	r18, Y+1	; 0x01
     604:	3a 81       	ldd	r19, Y+2	; 0x02
     606:	23 2b       	or	r18, r19
     608:	f9 f0       	breq	.+62     	; 0x648 <HID_Device_USBTask+0x13c>
     60a:	61 10       	cpse	r6, r1
     60c:	04 c0       	rjmp	.+8      	; 0x616 <HID_Device_USBTask+0x10a>
     60e:	71 10       	cpse	r7, r1
     610:	02 c0       	rjmp	.+4      	; 0x616 <HID_Device_USBTask+0x10a>
     612:	50 fe       	sbrs	r5, 0
     614:	19 c0       	rjmp	.+50     	; 0x648 <HID_Device_USBTask+0x13c>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
     616:	f7 01       	movw	r30, r14
     618:	84 85       	ldd	r24, Z+12	; 0x0c
     61a:	95 85       	ldd	r25, Z+13	; 0x0d
     61c:	97 87       	std	Z+15, r25	; 0x0f
     61e:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     620:	81 81       	ldd	r24, Z+1	; 0x01
     622:	8f 70       	andi	r24, 0x0F	; 15
     624:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
     628:	8b 81       	ldd	r24, Y+3	; 0x03
     62a:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     62c:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
     630:	69 81       	ldd	r22, Y+1	; 0x01
     632:	7a 81       	ldd	r23, Y+2	; 0x02
     634:	40 e0       	ldi	r20, 0x00	; 0
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	c5 01       	movw	r24, r10
     63a:	0e 94 48 03 	call	0x690	; 0x690 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     63e:	e8 ee       	ldi	r30, 0xE8	; 232
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	8e 77       	andi	r24, 0x7E	; 126
     646:	80 83       	st	Z, r24
     648:	80 91 e4 00 	lds	r24, 0x00E4
     64c:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
     650:	f7 01       	movw	r30, r14
     652:	93 87       	std	Z+11, r25	; 0x0b
     654:	82 87       	std	Z+10, r24	; 0x0a
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	9e be       	out	0x3e, r9	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	8d be       	out	0x3d, r8	; 61
	}
}
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de be       	out	0x3e, r13	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd be       	out	0x3d, r12	; 61
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	bf 90       	pop	r11
     682:	af 90       	pop	r10
     684:	9f 90       	pop	r9
     686:	8f 90       	pop	r8
     688:	7f 90       	pop	r7
     68a:	6f 90       	pop	r6
     68c:	5f 90       	pop	r5
     68e:	08 95       	ret

00000690 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     690:	8f 92       	push	r8
     692:	9f 92       	push	r9
     694:	af 92       	push	r10
     696:	bf 92       	push	r11
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	7c 01       	movw	r14, r24
     6aa:	eb 01       	movw	r28, r22
     6ac:	5a 01       	movw	r10, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     6ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <Endpoint_WaitUntilReady>
     6b2:	81 11       	cpse	r24, r1
     6b4:	40 c0       	rjmp	.+128    	; 0x736 <Endpoint_Write_Stream_LE+0xa6>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     6b6:	a1 14       	cp	r10, r1
     6b8:	b1 04       	cpc	r11, r1
     6ba:	39 f0       	breq	.+14     	; 0x6ca <Endpoint_Write_Stream_LE+0x3a>
	{
		Length -= *BytesProcessed;
     6bc:	f5 01       	movw	r30, r10
     6be:	80 81       	ld	r24, Z
     6c0:	91 81       	ldd	r25, Z+1	; 0x01
     6c2:	c8 1b       	sub	r28, r24
     6c4:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     6c6:	e8 0e       	add	r14, r24
     6c8:	f9 1e       	adc	r15, r25
	}

	while (Length)
     6ca:	20 97       	sbiw	r28, 0x00	; 0
     6cc:	89 f1       	breq	.+98     	; 0x730 <Endpoint_Write_Stream_LE+0xa0>
     6ce:	00 e0       	ldi	r16, 0x00	; 0
     6d0:	10 e0       	ldi	r17, 0x00	; 0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6d2:	0f 2e       	mov	r0, r31
     6d4:	f8 ee       	ldi	r31, 0xE8	; 232
     6d6:	8f 2e       	mov	r8, r31
     6d8:	91 2c       	mov	r9, r1
     6da:	f0 2d       	mov	r31, r0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6dc:	0f 2e       	mov	r0, r31
     6de:	f1 ef       	ldi	r31, 0xF1	; 241
     6e0:	cf 2e       	mov	r12, r31
     6e2:	d1 2c       	mov	r13, r1
     6e4:	f0 2d       	mov	r31, r0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6e6:	f4 01       	movw	r30, r8
     6e8:	80 81       	ld	r24, Z
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     6ea:	85 fd       	sbrc	r24, 5
     6ec:	16 c0       	rjmp	.+44     	; 0x71a <Endpoint_Write_Stream_LE+0x8a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6ee:	80 81       	ld	r24, Z
     6f0:	8e 77       	andi	r24, 0x7E	; 126
     6f2:	80 83       	st	Z, r24
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     6f4:	0e 94 ef 08 	call	0x11de	; 0x11de <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
     6f8:	a1 14       	cp	r10, r1
     6fa:	b1 04       	cpc	r11, r1
     6fc:	49 f0       	breq	.+18     	; 0x710 <Endpoint_Write_Stream_LE+0x80>
			{
				*BytesProcessed += BytesInTransfer;
     6fe:	f5 01       	movw	r30, r10
     700:	80 81       	ld	r24, Z
     702:	91 81       	ldd	r25, Z+1	; 0x01
     704:	08 0f       	add	r16, r24
     706:	19 1f       	adc	r17, r25
     708:	11 83       	std	Z+1, r17	; 0x01
     70a:	00 83       	st	Z, r16
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     70c:	85 e0       	ldi	r24, 0x05	; 5
     70e:	13 c0       	rjmp	.+38     	; 0x736 <Endpoint_Write_Stream_LE+0xa6>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
     710:	0e 94 16 06 	call	0xc2c	; 0xc2c <Endpoint_WaitUntilReady>
     714:	88 23       	and	r24, r24
     716:	49 f0       	breq	.+18     	; 0x72a <Endpoint_Write_Stream_LE+0x9a>
     718:	0e c0       	rjmp	.+28     	; 0x736 <Endpoint_Write_Stream_LE+0xa6>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     71a:	f7 01       	movw	r30, r14
     71c:	81 91       	ld	r24, Z+
     71e:	7f 01       	movw	r14, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     720:	f6 01       	movw	r30, r12
     722:	80 83       	st	Z, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
     724:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     726:	0f 5f       	subi	r16, 0xFF	; 255
     728:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
     72a:	20 97       	sbiw	r28, 0x00	; 0
     72c:	e1 f6       	brne	.-72     	; 0x6e6 <Endpoint_Write_Stream_LE+0x56>
     72e:	02 c0       	rjmp	.+4      	; 0x734 <Endpoint_Write_Stream_LE+0xa4>
			Length--;
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	01 c0       	rjmp	.+2      	; 0x736 <Endpoint_Write_Stream_LE+0xa6>
     734:	80 e0       	ldi	r24, 0x00	; 0
}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	ff 90       	pop	r15
     740:	ef 90       	pop	r14
     742:	df 90       	pop	r13
     744:	cf 90       	pop	r12
     746:	bf 90       	pop	r11
     748:	af 90       	pop	r10
     74a:	9f 90       	pop	r9
     74c:	8f 90       	pop	r8
     74e:	08 95       	ret

00000750 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     750:	df 92       	push	r13
     752:	ef 92       	push	r14
     754:	ff 92       	push	r15
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     75e:	20 91 52 02 	lds	r18, 0x0252
     762:	30 91 53 02 	lds	r19, 0x0253
     766:	26 17       	cp	r18, r22
     768:	37 07       	cpc	r19, r23
     76a:	58 f0       	brcs	.+22     	; 0x782 <Endpoint_Write_Control_Stream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     76c:	61 15       	cp	r22, r1
     76e:	71 05       	cpc	r23, r1
     770:	39 f4       	brne	.+14     	; 0x780 <Endpoint_Write_Control_Stream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     772:	e8 ee       	ldi	r30, 0xE8	; 232
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	20 81       	ld	r18, Z
     778:	2e 77       	andi	r18, 0x7E	; 126
     77a:	20 83       	st	Z, r18
     77c:	9b 01       	movw	r18, r22
     77e:	01 c0       	rjmp	.+2      	; 0x782 <Endpoint_Write_Control_Stream_LE+0x32>
     780:	9b 01       	movw	r18, r22
     782:	a0 e0       	ldi	r26, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     784:	e8 ee       	ldi	r30, 0xE8	; 232
     786:	f0 e0       	ldi	r31, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     788:	03 ef       	ldi	r16, 0xF3	; 243
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	62 ef       	ldi	r22, 0xF2	; 242
     78e:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     790:	c1 ef       	ldi	r28, 0xF1	; 241
     792:	d0 e0       	ldi	r29, 0x00	; 0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     794:	ff 24       	eor	r15, r15
     796:	f3 94       	inc	r15
     798:	e1 2c       	mov	r14, r1
     79a:	38 c0       	rjmp	.+112    	; 0x80c <Endpoint_Write_Control_Stream_LE+0xbc>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     79c:	40 91 4b 02 	lds	r20, 0x024B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     7a0:	44 23       	and	r20, r20
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <Endpoint_Write_Control_Stream_LE+0x56>
     7a4:	47 c0       	rjmp	.+142    	; 0x834 <Endpoint_Write_Control_Stream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     7a6:	45 30       	cpi	r20, 0x05	; 5
     7a8:	09 f4       	brne	.+2      	; 0x7ac <Endpoint_Write_Control_Stream_LE+0x5c>
     7aa:	46 c0       	rjmp	.+140    	; 0x838 <Endpoint_Write_Control_Stream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     7ac:	40 81       	ld	r20, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     7ae:	43 fd       	sbrc	r20, 3
     7b0:	45 c0       	rjmp	.+138    	; 0x83c <Endpoint_Write_Control_Stream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     7b2:	40 81       	ld	r20, Z
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     7b4:	42 ff       	sbrs	r20, 2
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <Endpoint_Write_Control_Stream_LE+0x6e>
     7b8:	e8 ee       	ldi	r30, 0xE8	; 232
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	36 c0       	rjmp	.+108    	; 0x82a <Endpoint_Write_Control_Stream_LE+0xda>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     7be:	40 81       	ld	r20, Z
		  break;

		if (Endpoint_IsINReady())
     7c0:	40 ff       	sbrs	r20, 0
     7c2:	24 c0       	rjmp	.+72     	; 0x80c <Endpoint_Write_Control_Stream_LE+0xbc>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     7c4:	d8 01       	movw	r26, r16
     7c6:	dc 90       	ld	r13, X
     7c8:	db 01       	movw	r26, r22
     7ca:	4c 91       	ld	r20, X
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	5d 29       	or	r21, r13
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7d0:	21 15       	cp	r18, r1
     7d2:	31 05       	cpc	r19, r1
     7d4:	99 f0       	breq	.+38     	; 0x7fc <Endpoint_Write_Control_Stream_LE+0xac>
     7d6:	48 30       	cpi	r20, 0x08	; 8
     7d8:	51 05       	cpc	r21, r1
     7da:	80 f4       	brcc	.+32     	; 0x7fc <Endpoint_Write_Control_Stream_LE+0xac>
     7dc:	a8 2f       	mov	r26, r24
     7de:	b9 2f       	mov	r27, r25
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7e0:	8d 91       	ld	r24, X+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7e2:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     7e4:	8a 2f       	mov	r24, r26
     7e6:	9b 2f       	mov	r25, r27
				Length--;
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     7ec:	4f 5f       	subi	r20, 0xFF	; 255
     7ee:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     7f0:	21 15       	cp	r18, r1
     7f2:	31 05       	cpc	r19, r1
     7f4:	19 f0       	breq	.+6      	; 0x7fc <Endpoint_Write_Control_Stream_LE+0xac>
     7f6:	48 30       	cpi	r20, 0x08	; 8
     7f8:	51 05       	cpc	r21, r1
     7fa:	91 f7       	brne	.-28     	; 0x7e0 <Endpoint_Write_Control_Stream_LE+0x90>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     7fc:	af 2d       	mov	r26, r15
     7fe:	48 30       	cpi	r20, 0x08	; 8
     800:	51 05       	cpc	r21, r1
     802:	09 f0       	breq	.+2      	; 0x806 <Endpoint_Write_Control_Stream_LE+0xb6>
     804:	ae 2d       	mov	r26, r14
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     806:	40 81       	ld	r20, Z
     808:	4e 77       	andi	r20, 0x7E	; 126
     80a:	40 83       	st	Z, r20
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     80c:	21 15       	cp	r18, r1
     80e:	31 05       	cpc	r19, r1
     810:	29 f6       	brne	.-118    	; 0x79c <Endpoint_Write_Control_Stream_LE+0x4c>
     812:	a1 11       	cpse	r26, r1
     814:	c3 cf       	rjmp	.-122    	; 0x79c <Endpoint_Write_Control_Stream_LE+0x4c>
     816:	d0 cf       	rjmp	.-96     	; 0x7b8 <Endpoint_Write_Control_Stream_LE+0x68>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     818:	80 91 4b 02 	lds	r24, 0x024B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     81c:	88 23       	and	r24, r24
     81e:	81 f0       	breq	.+32     	; 0x840 <Endpoint_Write_Control_Stream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     820:	85 30       	cpi	r24, 0x05	; 5
     822:	81 f0       	breq	.+32     	; 0x844 <Endpoint_Write_Control_Stream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     824:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     826:	83 fd       	sbrc	r24, 3
     828:	0f c0       	rjmp	.+30     	; 0x848 <Endpoint_Write_Control_Stream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     82a:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     82c:	82 ff       	sbrs	r24, 2
     82e:	f4 cf       	rjmp	.-24     	; 0x818 <Endpoint_Write_Control_Stream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	0b c0       	rjmp	.+22     	; 0x84a <Endpoint_Write_Control_Stream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	09 c0       	rjmp	.+18     	; 0x84a <Endpoint_Write_Control_Stream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	07 c0       	rjmp	.+14     	; 0x84a <Endpoint_Write_Control_Stream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	05 c0       	rjmp	.+10     	; 0x84a <Endpoint_Write_Control_Stream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     840:	82 e0       	ldi	r24, 0x02	; 2
     842:	03 c0       	rjmp	.+6      	; 0x84a <Endpoint_Write_Control_Stream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     844:	83 e0       	ldi	r24, 0x03	; 3
     846:	01 c0       	rjmp	.+2      	; 0x84a <Endpoint_Write_Control_Stream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     848:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	1f 91       	pop	r17
     850:	0f 91       	pop	r16
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	08 95       	ret

0000085a <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     85a:	cf 92       	push	r12
     85c:	df 92       	push	r13
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     868:	61 15       	cp	r22, r1
     86a:	71 05       	cpc	r23, r1
     86c:	29 f4       	brne	.+10     	; 0x878 <Endpoint_Read_Control_Stream_LE+0x1e>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     86e:	e8 ee       	ldi	r30, 0xE8	; 232
     870:	f0 e0       	ldi	r31, 0x00	; 0
     872:	20 81       	ld	r18, Z
     874:	2b 77       	andi	r18, 0x7B	; 123
     876:	20 83       	st	Z, r18
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     878:	e8 ee       	ldi	r30, 0xE8	; 232
     87a:	f0 e0       	ldi	r31, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     87c:	43 ef       	ldi	r20, 0xF3	; 243
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	0f 2e       	mov	r0, r31
     882:	f2 ef       	ldi	r31, 0xF2	; 242
     884:	cf 2e       	mov	r12, r31
     886:	d1 2c       	mov	r13, r1
     888:	f0 2d       	mov	r31, r0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     88a:	01 ef       	ldi	r16, 0xF1	; 241
     88c:	10 e0       	ldi	r17, 0x00	; 0
     88e:	22 c0       	rjmp	.+68     	; 0x8d4 <Endpoint_Read_Control_Stream_LE+0x7a>
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     890:	20 91 4b 02 	lds	r18, 0x024B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     894:	22 23       	and	r18, r18
     896:	e1 f1       	breq	.+120    	; 0x910 <Endpoint_Read_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     898:	25 30       	cpi	r18, 0x05	; 5
     89a:	e1 f1       	breq	.+120    	; 0x914 <Endpoint_Read_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     89c:	20 81       	ld	r18, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     89e:	23 fd       	sbrc	r18, 3
     8a0:	3b c0       	rjmp	.+118    	; 0x918 <Endpoint_Read_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8a2:	20 81       	ld	r18, Z
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     8a4:	22 ff       	sbrs	r18, 2
     8a6:	f4 cf       	rjmp	.-24     	; 0x890 <Endpoint_Read_Control_Stream_LE+0x36>
     8a8:	43 c0       	rjmp	.+134    	; 0x930 <Endpoint_Read_Control_Stream_LE+0xd6>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8aa:	e8 01       	movw	r28, r16
     8ac:	88 81       	ld	r24, Y
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     8ae:	8d 93       	st	X+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     8b0:	8a 2f       	mov	r24, r26
     8b2:	9b 2f       	mov	r25, r27
				Length--;
     8b4:	61 50       	subi	r22, 0x01	; 1
     8b6:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     8b8:	61 15       	cp	r22, r1
     8ba:	71 05       	cpc	r23, r1
     8bc:	41 f0       	breq	.+16     	; 0x8ce <Endpoint_Read_Control_Stream_LE+0x74>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     8be:	ea 01       	movw	r28, r20
     8c0:	f8 80       	ld	r15, Y
     8c2:	e6 01       	movw	r28, r12
     8c4:	28 81       	ld	r18, Y
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	3f 29       	or	r19, r15
     8ca:	23 2b       	or	r18, r19
     8cc:	71 f7       	brne	.-36     	; 0x8aa <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     8ce:	20 81       	ld	r18, Z
     8d0:	2b 77       	andi	r18, 0x7B	; 123
     8d2:	20 83       	st	Z, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
     8d4:	61 15       	cp	r22, r1
     8d6:	71 05       	cpc	r23, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <Endpoint_Read_Control_Stream_LE+0x86>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     8da:	e8 ee       	ldi	r30, 0xE8	; 232
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	13 c0       	rjmp	.+38     	; 0x906 <Endpoint_Read_Control_Stream_LE+0xac>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8e0:	20 91 4b 02 	lds	r18, 0x024B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8e4:	22 23       	and	r18, r18
     8e6:	d1 f0       	breq	.+52     	; 0x91c <Endpoint_Read_Control_Stream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     8e8:	25 30       	cpi	r18, 0x05	; 5
     8ea:	d1 f0       	breq	.+52     	; 0x920 <Endpoint_Read_Control_Stream_LE+0xc6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     8ec:	20 81       	ld	r18, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     8ee:	23 fd       	sbrc	r18, 3
     8f0:	19 c0       	rjmp	.+50     	; 0x924 <Endpoint_Read_Control_Stream_LE+0xca>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     8f2:	20 81       	ld	r18, Z
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     8f4:	22 fd       	sbrc	r18, 2
     8f6:	1c c0       	rjmp	.+56     	; 0x930 <Endpoint_Read_Control_Stream_LE+0xd6>
     8f8:	cb cf       	rjmp	.-106    	; 0x890 <Endpoint_Read_Control_Stream_LE+0x36>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     8fa:	80 91 4b 02 	lds	r24, 0x024B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     8fe:	88 23       	and	r24, r24
     900:	99 f0       	breq	.+38     	; 0x928 <Endpoint_Read_Control_Stream_LE+0xce>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     902:	85 30       	cpi	r24, 0x05	; 5
     904:	99 f0       	breq	.+38     	; 0x92c <Endpoint_Read_Control_Stream_LE+0xd2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     906:	80 81       	ld	r24, Z

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     908:	80 ff       	sbrs	r24, 0
     90a:	f7 cf       	rjmp	.-18     	; 0x8fa <Endpoint_Read_Control_Stream_LE+0xa0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	1b c0       	rjmp	.+54     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     910:	82 e0       	ldi	r24, 0x02	; 2
     912:	19 c0       	rjmp	.+50     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	17 c0       	rjmp	.+46     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	15 c0       	rjmp	.+42     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	13 c0       	rjmp	.+38     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     920:	83 e0       	ldi	r24, 0x03	; 3
     922:	11 c0       	rjmp	.+34     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	0f c0       	rjmp	.+30     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     928:	82 e0       	ldi	r24, 0x02	; 2
     92a:	0d c0       	rjmp	.+26     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     92c:	83 e0       	ldi	r24, 0x03	; 3
     92e:	0b c0       	rjmp	.+22     	; 0x946 <Endpoint_Read_Control_Stream_LE+0xec>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     930:	ea 01       	movw	r28, r20
     932:	a8 81       	ld	r26, Y
     934:	e6 01       	movw	r28, r12
     936:	28 81       	ld	r18, Y
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	3a 2b       	or	r19, r26
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     93c:	23 2b       	or	r18, r19
     93e:	39 f2       	breq	.-114    	; 0x8ce <Endpoint_Read_Control_Stream_LE+0x74>
     940:	a8 2f       	mov	r26, r24
     942:	b9 2f       	mov	r27, r25
     944:	b2 cf       	rjmp	.-156    	; 0x8aa <Endpoint_Read_Control_Stream_LE+0x50>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     956:	cf 92       	push	r12
     958:	df 92       	push	r13
     95a:	ff 92       	push	r15
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     964:	20 91 52 02 	lds	r18, 0x0252
     968:	30 91 53 02 	lds	r19, 0x0253
     96c:	26 17       	cp	r18, r22
     96e:	37 07       	cpc	r19, r23
     970:	58 f0       	brcs	.+22     	; 0x988 <Endpoint_Write_Control_PStream_LE+0x32>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     972:	61 15       	cp	r22, r1
     974:	71 05       	cpc	r23, r1
     976:	39 f4       	brne	.+14     	; 0x986 <Endpoint_Write_Control_PStream_LE+0x30>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     978:	e8 ee       	ldi	r30, 0xE8	; 232
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	20 81       	ld	r18, Z
     97e:	2e 77       	andi	r18, 0x7E	; 126
     980:	20 83       	st	Z, r18
     982:	9b 01       	movw	r18, r22
     984:	01 c0       	rjmp	.+2      	; 0x988 <Endpoint_Write_Control_PStream_LE+0x32>
     986:	9b 01       	movw	r18, r22
     988:	e8 2f       	mov	r30, r24
     98a:	f9 2f       	mov	r31, r25
     98c:	10 e0       	ldi	r17, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     98e:	a8 ee       	ldi	r26, 0xE8	; 232
     990:	b0 e0       	ldi	r27, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     992:	63 ef       	ldi	r22, 0xF3	; 243
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	42 ef       	ldi	r20, 0xF2	; 242
     998:	50 e0       	ldi	r21, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     99a:	0f 2e       	mov	r0, r31
     99c:	f1 ef       	ldi	r31, 0xF1	; 241
     99e:	cf 2e       	mov	r12, r31
     9a0:	d1 2c       	mov	r13, r1
     9a2:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9a4:	01 e0       	ldi	r16, 0x01	; 1
     9a6:	f1 2c       	mov	r15, r1
     9a8:	34 c0       	rjmp	.+104    	; 0xa12 <Endpoint_Write_Control_PStream_LE+0xbc>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9aa:	80 91 4b 02 	lds	r24, 0x024B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9ae:	88 23       	and	r24, r24
     9b0:	09 f4       	brne	.+2      	; 0x9b4 <Endpoint_Write_Control_PStream_LE+0x5e>
     9b2:	43 c0       	rjmp	.+134    	; 0xa3a <Endpoint_Write_Control_PStream_LE+0xe4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9b4:	85 30       	cpi	r24, 0x05	; 5
     9b6:	09 f4       	brne	.+2      	; 0x9ba <Endpoint_Write_Control_PStream_LE+0x64>
     9b8:	42 c0       	rjmp	.+132    	; 0xa3e <Endpoint_Write_Control_PStream_LE+0xe8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9ba:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9bc:	83 fd       	sbrc	r24, 3
     9be:	41 c0       	rjmp	.+130    	; 0xa42 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9c0:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9c2:	82 ff       	sbrs	r24, 2
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <Endpoint_Write_Control_PStream_LE+0x76>
     9c6:	e8 ee       	ldi	r30, 0xE8	; 232
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	32 c0       	rjmp	.+100    	; 0xa30 <Endpoint_Write_Control_PStream_LE+0xda>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9cc:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
     9ce:	80 ff       	sbrs	r24, 0
     9d0:	20 c0       	rjmp	.+64     	; 0xa12 <Endpoint_Write_Control_PStream_LE+0xbc>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     9d2:	eb 01       	movw	r28, r22
     9d4:	18 81       	ld	r17, Y
     9d6:	ea 01       	movw	r28, r20
     9d8:	88 81       	ld	r24, Y
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	91 2b       	or	r25, r17
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9de:	21 15       	cp	r18, r1
     9e0:	31 05       	cpc	r19, r1
     9e2:	81 f0       	breq	.+32     	; 0xa04 <Endpoint_Write_Control_PStream_LE+0xae>
     9e4:	88 30       	cpi	r24, 0x08	; 8
     9e6:	91 05       	cpc	r25, r1
     9e8:	68 f4       	brcc	.+26     	; 0xa04 <Endpoint_Write_Control_PStream_LE+0xae>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9ea:	14 91       	lpm	r17, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9ec:	e6 01       	movw	r28, r12
     9ee:	18 83       	st	Y, r17
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     9f0:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     9f2:	21 50       	subi	r18, 0x01	; 1
     9f4:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
     9f6:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9f8:	21 15       	cp	r18, r1
     9fa:	31 05       	cpc	r19, r1
     9fc:	19 f0       	breq	.+6      	; 0xa04 <Endpoint_Write_Control_PStream_LE+0xae>
     9fe:	88 30       	cpi	r24, 0x08	; 8
     a00:	91 05       	cpc	r25, r1
     a02:	99 f7       	brne	.-26     	; 0x9ea <Endpoint_Write_Control_PStream_LE+0x94>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a04:	10 2f       	mov	r17, r16
     a06:	08 97       	sbiw	r24, 0x08	; 8
     a08:	09 f0       	breq	.+2      	; 0xa0c <Endpoint_Write_Control_PStream_LE+0xb6>
     a0a:	1f 2d       	mov	r17, r15
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a0c:	8c 91       	ld	r24, X
     a0e:	8e 77       	andi	r24, 0x7E	; 126
     a10:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a12:	21 15       	cp	r18, r1
     a14:	31 05       	cpc	r19, r1
     a16:	49 f6       	brne	.-110    	; 0x9aa <Endpoint_Write_Control_PStream_LE+0x54>
     a18:	11 11       	cpse	r17, r1
     a1a:	c7 cf       	rjmp	.-114    	; 0x9aa <Endpoint_Write_Control_PStream_LE+0x54>
     a1c:	d4 cf       	rjmp	.-88     	; 0x9c6 <Endpoint_Write_Control_PStream_LE+0x70>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a1e:	80 91 4b 02 	lds	r24, 0x024B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a22:	88 23       	and	r24, r24
     a24:	81 f0       	breq	.+32     	; 0xa46 <Endpoint_Write_Control_PStream_LE+0xf0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a26:	85 30       	cpi	r24, 0x05	; 5
     a28:	81 f0       	breq	.+32     	; 0xa4a <Endpoint_Write_Control_PStream_LE+0xf4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a2a:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a2c:	83 fd       	sbrc	r24, 3
     a2e:	0f c0       	rjmp	.+30     	; 0xa4e <Endpoint_Write_Control_PStream_LE+0xf8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a30:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a32:	82 ff       	sbrs	r24, 2
     a34:	f4 cf       	rjmp	.-24     	; 0xa1e <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	0b c0       	rjmp	.+22     	; 0xa50 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a3a:	82 e0       	ldi	r24, 0x02	; 2
     a3c:	09 c0       	rjmp	.+18     	; 0xa50 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	07 c0       	rjmp	.+14     	; 0xa50 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	05 c0       	rjmp	.+10     	; 0xa50 <Endpoint_Write_Control_PStream_LE+0xfa>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	03 c0       	rjmp	.+6      	; 0xa50 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a4a:	83 e0       	ldi	r24, 0x03	; 3
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <Endpoint_Write_Control_PStream_LE+0xfa>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a4e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	df 90       	pop	r13
     a5c:	cf 90       	pop	r12
     a5e:	08 95       	ret

00000a60 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     a60:	8f 92       	push	r8
     a62:	9f 92       	push	r9
     a64:	bf 92       	push	r11
     a66:	cf 92       	push	r12
     a68:	df 92       	push	r13
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     a76:	87 30       	cpi	r24, 0x07	; 7
     a78:	70 f1       	brcs	.+92     	; 0xad6 <Endpoint_ConfigureEndpoint_Prv+0x76>
     a7a:	26 c0       	rjmp	.+76     	; 0xac8 <Endpoint_ConfigureEndpoint_Prv+0x68>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a7c:	59 2f       	mov	r21, r25
     a7e:	5f 70       	andi	r21, 0x0F	; 15
     a80:	e8 01       	movw	r28, r16
     a82:	58 83       	st	Y, r21
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     a84:	89 17       	cp	r24, r25
     a86:	31 f0       	breq	.+12     	; 0xa94 <Endpoint_ConfigureEndpoint_Prv+0x34>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     a88:	e9 01       	movw	r28, r18
     a8a:	d8 80       	ld	r13, Y
			UECFG1XTemp = UECFG1X;
     a8c:	50 81       	ld	r21, Z
			UEIENXTemp  = UEIENX;
     a8e:	e4 01       	movw	r28, r8
     a90:	78 81       	ld	r23, Y
     a92:	03 c0       	rjmp	.+6      	; 0xa9a <Endpoint_ConfigureEndpoint_Prv+0x3a>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     a94:	5b 2d       	mov	r21, r11

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     a96:	d6 2e       	mov	r13, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     a98:	7c 2d       	mov	r23, r12
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     a9a:	51 ff       	sbrs	r21, 1
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     a9e:	4c 91       	ld	r20, X
     aa0:	4e 7f       	andi	r20, 0xFE	; 254
     aa2:	4c 93       	st	X, r20
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     aa4:	40 81       	ld	r20, Z
     aa6:	4d 7f       	andi	r20, 0xFD	; 253
     aa8:	40 83       	st	Z, r20
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     aaa:	4c 91       	ld	r20, X
     aac:	41 60       	ori	r20, 0x01	; 1
     aae:	4c 93       	st	X, r20

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     ab0:	e9 01       	movw	r28, r18
     ab2:	d8 82       	st	Y, r13
		UECFG1X = UECFG1XTemp;
     ab4:	50 83       	st	Z, r21
		UEIENX  = UEIENXTemp;
     ab6:	e4 01       	movw	r28, r8
     ab8:	78 83       	st	Y, r23
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     aba:	e7 01       	movw	r28, r14
     abc:	58 81       	ld	r21, Y

		if (!(Endpoint_IsConfigured()))
     abe:	55 23       	and	r21, r21
     ac0:	44 f4       	brge	.+16     	; 0xad2 <Endpoint_ConfigureEndpoint_Prv+0x72>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     ac2:	9f 5f       	subi	r25, 0xFF	; 255
     ac4:	97 30       	cpi	r25, 0x07	; 7
     ac6:	d1 f6       	brne	.-76     	; 0xa7c <Endpoint_ConfigureEndpoint_Prv+0x1c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ac8:	8f 70       	andi	r24, 0x0F	; 15
     aca:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	1f c0       	rjmp	.+62     	; 0xb10 <__stack+0x11>
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	1d c0       	rjmp	.+58     	; 0xb10 <__stack+0x11>
     ad6:	98 2f       	mov	r25, r24
     ad8:	9f 70       	andi	r25, 0x0F	; 15
     ada:	90 93 e9 00 	sts	0x00E9, r25
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     ade:	98 2f       	mov	r25, r24
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     ae0:	54 2f       	mov	r21, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     ae2:	d6 2e       	mov	r13, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     ae4:	70 e0       	ldi	r23, 0x00	; 0
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     ae6:	ab ee       	ldi	r26, 0xEB	; 235
     ae8:	b0 e0       	ldi	r27, 0x00	; 0

		if (!(UECFG1XTemp & (1 << ALLOC)))
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     aea:	ed ee       	ldi	r30, 0xED	; 237
     aec:	f0 e0       	ldi	r31, 0x00	; 0

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     aee:	2c ee       	ldi	r18, 0xEC	; 236
     af0:	30 e0       	ldi	r19, 0x00	; 0
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;
     af2:	0f 2e       	mov	r0, r31
     af4:	f0 ef       	ldi	r31, 0xF0	; 240
     af6:	8f 2e       	mov	r8, r31
     af8:	91 2c       	mov	r9, r1
     afa:	f0 2d       	mov	r31, r0
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     afc:	0f 2e       	mov	r0, r31
     afe:	fe ee       	ldi	r31, 0xEE	; 238
     b00:	ef 2e       	mov	r14, r31
     b02:	f1 2c       	mov	r15, r1
     b04:	f0 2d       	mov	r31, r0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b06:	09 ee       	ldi	r16, 0xE9	; 233
     b08:	10 e0       	ldi	r17, 0x00	; 0
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     b0a:	b4 2e       	mov	r11, r20
			UEIENXTemp  = 0;
     b0c:	c1 2c       	mov	r12, r1
     b0e:	c5 cf       	rjmp	.-118    	; 0xa9a <Endpoint_ConfigureEndpoint_Prv+0x3a>
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	1f 91       	pop	r17
     b16:	0f 91       	pop	r16
     b18:	ff 90       	pop	r15
     b1a:	ef 90       	pop	r14
     b1c:	df 90       	pop	r13
     b1e:	cf 90       	pop	r12
     b20:	bf 90       	pop	r11
     b22:	9f 90       	pop	r9
     b24:	8f 90       	pop	r8
     b26:	08 95       	ret

00000b28 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	06 2f       	mov	r16, r22
	for (uint8_t i = 0; i < Entries; i++)
     b3c:	66 23       	and	r22, r22
     b3e:	09 f4       	brne	.+2      	; 0xb42 <Endpoint_ConfigureEndpointTable+0x1a>
     b40:	42 c0       	rjmp	.+132    	; 0xbc6 <Endpoint_ConfigureEndpointTable+0x9e>
     b42:	c8 2f       	mov	r28, r24
     b44:	d9 2f       	mov	r29, r25
     b46:	10 e0       	ldi	r17, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     b48:	f1 2c       	mov	r15, r1
				uint16_t CheckBytes = 8;
     b4a:	68 94       	set
     b4c:	dd 24       	eor	r13, r13
     b4e:	d3 f8       	bld	r13, 3
     b50:	e1 2c       	mov	r14, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b52:	68 94       	set
     b54:	bb 24       	eor	r11, r11
     b56:	b1 f8       	bld	r11, 1
     b58:	0f 2e       	mov	r0, r31
     b5a:	f6 e0       	ldi	r31, 0x06	; 6
     b5c:	cf 2e       	mov	r12, r31
     b5e:	f0 2d       	mov	r31, r0
	{
		if (!(Table[i].Address))
     b60:	58 81       	ld	r21, Y
     b62:	55 23       	and	r21, r21
     b64:	59 f1       	breq	.+86     	; 0xbbc <Endpoint_ConfigureEndpointTable+0x94>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	7b 81       	ldd	r23, Y+3	; 0x03
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     b6e:	85 2f       	mov	r24, r21
     b70:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     b72:	87 30       	cpi	r24, 0x07	; 7
     b74:	50 f5       	brcc	.+84     	; 0xbca <Endpoint_ConfigureEndpointTable+0xa2>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b76:	92 30       	cpi	r25, 0x02	; 2
     b78:	10 f0       	brcs	.+4      	; 0xb7e <Endpoint_ConfigureEndpointTable+0x56>
     b7a:	4c 2d       	mov	r20, r12
     b7c:	01 c0       	rjmp	.+2      	; 0xb80 <Endpoint_ConfigureEndpointTable+0x58>
     b7e:	4b 2d       	mov	r20, r11
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     b80:	e9 30       	cpi	r30, 0x09	; 9
     b82:	f1 05       	cpc	r31, r1
     b84:	50 f0       	brcs	.+20     	; 0xb9a <Endpoint_ConfigureEndpointTable+0x72>
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     b86:	2d 2d       	mov	r18, r13
     b88:	3e 2d       	mov	r19, r14
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     b8a:	9f 2d       	mov	r25, r15
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     b8c:	9f 5f       	subi	r25, 0xFF	; 255
					CheckBytes <<= 1;
     b8e:	22 0f       	add	r18, r18
     b90:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     b92:	2e 17       	cp	r18, r30
     b94:	3f 07       	cpc	r19, r31
     b96:	d0 f3       	brcs	.-12     	; 0xb8c <Endpoint_ConfigureEndpointTable+0x64>
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <Endpoint_ConfigureEndpointTable+0x74>
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     b9a:	9f 2d       	mov	r25, r15
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     b9c:	92 95       	swap	r25
     b9e:	90 7f       	andi	r25, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ba0:	49 2b       	or	r20, r25
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     ba2:	55 1f       	adc	r21, r21
     ba4:	55 27       	eor	r21, r21
     ba6:	55 1f       	adc	r21, r21
     ba8:	90 e4       	ldi	r25, 0x40	; 64
     baa:	79 9f       	mul	r23, r25
     bac:	90 01       	movw	r18, r0
     bae:	11 24       	eor	r1, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bb0:	65 2f       	mov	r22, r21
     bb2:	62 2b       	or	r22, r18
     bb4:	0e 94 30 05 	call	0xa60	; 0xa60 <Endpoint_ConfigureEndpoint_Prv>
     bb8:	88 23       	and	r24, r24
     bba:	51 f0       	breq	.+20     	; 0xbd0 <Endpoint_ConfigureEndpointTable+0xa8>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     bbc:	1f 5f       	subi	r17, 0xFF	; 255
     bbe:	25 96       	adiw	r28, 0x05	; 5
     bc0:	10 13       	cpse	r17, r16
     bc2:	ce cf       	rjmp	.-100    	; 0xb60 <Endpoint_ConfigureEndpointTable+0x38>
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <Endpoint_ConfigureEndpointTable+0xa6>

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <Endpoint_ConfigureEndpointTable+0xa8>
	{
		if (!(Table[i].Address))
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	01 c0       	rjmp	.+2      	; 0xbd0 <Endpoint_ConfigureEndpointTable+0xa8>
	}

	return true;
     bce:	81 e0       	ldi	r24, 0x01	; 1
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	08 95       	ret

00000be4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     be4:	80 91 4c 02 	lds	r24, 0x024C
     be8:	88 23       	and	r24, r24
     bea:	1c f0       	brlt	.+6      	; 0xbf2 <Endpoint_ClearStatusStage+0xe>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bec:	e8 ee       	ldi	r30, 0xE8	; 232
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	14 c0       	rjmp	.+40     	; 0xc1a <Endpoint_ClearStatusStage+0x36>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bf2:	e8 ee       	ldi	r30, 0xE8	; 232
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <Endpoint_ClearStatusStage+0x1c>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bf8:	80 91 4b 02 	lds	r24, 0x024B
     bfc:	88 23       	and	r24, r24
     bfe:	a9 f0       	breq	.+42     	; 0xc2a <Endpoint_ClearStatusStage+0x46>
     c00:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     c02:	82 ff       	sbrs	r24, 2
     c04:	f9 cf       	rjmp	.-14     	; 0xbf8 <Endpoint_ClearStatusStage+0x14>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c06:	e8 ee       	ldi	r30, 0xE8	; 232
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8b 77       	andi	r24, 0x7B	; 123
     c0e:	80 83       	st	Z, r24
     c10:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c12:	80 91 4b 02 	lds	r24, 0x024B
     c16:	88 23       	and	r24, r24
     c18:	41 f0       	breq	.+16     	; 0xc2a <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c1a:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     c1c:	80 ff       	sbrs	r24, 0
     c1e:	f9 cf       	rjmp	.-14     	; 0xc12 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c20:	e8 ee       	ldi	r30, 0xE8	; 232
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8e 77       	andi	r24, 0x7E	; 126
     c28:	80 83       	st	Z, r24
     c2a:	08 95       	ret

00000c2c <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c34:	20 91 e4 00 	lds	r18, 0x00E4
     c38:	30 91 e5 00 	lds	r19, 0x00E5
     c3c:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c3e:	ac ee       	ldi	r26, 0xEC	; 236
     c40:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c42:	e8 ee       	ldi	r30, 0xE8	; 232
     c44:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c46:	0b ee       	ldi	r16, 0xEB	; 235
     c48:	10 e0       	ldi	r17, 0x00	; 0
     c4a:	44 ee       	ldi	r20, 0xE4	; 228
     c4c:	50 e0       	ldi	r21, 0x00	; 0
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c4e:	8c 91       	ld	r24, X
     c50:	80 fd       	sbrc	r24, 0
     c52:	21 c0       	rjmp	.+66     	; 0xc96 <Endpoint_WaitUntilReady+0x6a>
     c54:	24 c0       	rjmp	.+72     	; 0xc9e <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c56:	80 91 4b 02 	lds	r24, 0x024B

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c5a:	88 23       	and	r24, r24
     c5c:	81 f0       	breq	.+32     	; 0xc7e <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c5e:	85 30       	cpi	r24, 0x05	; 5
     c60:	81 f0       	breq	.+32     	; 0xc82 <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c62:	e8 01       	movw	r28, r16
     c64:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c66:	85 fd       	sbrc	r24, 5
     c68:	0e c0       	rjmp	.+28     	; 0xc86 <Endpoint_WaitUntilReady+0x5a>
     c6a:	ea 01       	movw	r28, r20
     c6c:	88 81       	ld	r24, Y
     c6e:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c70:	28 17       	cp	r18, r24
     c72:	39 07       	cpc	r19, r25
     c74:	61 f3       	breq	.-40     	; 0xc4e <Endpoint_WaitUntilReady+0x22>
     c76:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c78:	41 f0       	breq	.+16     	; 0xc8a <Endpoint_WaitUntilReady+0x5e>
     c7a:	9c 01       	movw	r18, r24
     c7c:	e8 cf       	rjmp	.-48     	; 0xc4e <Endpoint_WaitUntilReady+0x22>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     c7e:	82 e0       	ldi	r24, 0x02	; 2
     c80:	12 c0       	rjmp	.+36     	; 0xca6 <Endpoint_WaitUntilReady+0x7a>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     c82:	83 e0       	ldi	r24, 0x03	; 3
     c84:	10 c0       	rjmp	.+32     	; 0xca6 <Endpoint_WaitUntilReady+0x7a>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	0e c0       	rjmp	.+28     	; 0xca6 <Endpoint_WaitUntilReady+0x7a>
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	0c c0       	rjmp	.+24     	; 0xca6 <Endpoint_WaitUntilReady+0x7a>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	0a c0       	rjmp	.+20     	; 0xca6 <Endpoint_WaitUntilReady+0x7a>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	08 c0       	rjmp	.+16     	; 0xca6 <Endpoint_WaitUntilReady+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c96:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     c98:	80 ff       	sbrs	r24, 0
     c9a:	dd cf       	rjmp	.-70     	; 0xc56 <Endpoint_WaitUntilReady+0x2a>
     c9c:	f8 cf       	rjmp	.-16     	; 0xc8e <Endpoint_WaitUntilReady+0x62>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c9e:	80 81       	ld	r24, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     ca0:	82 ff       	sbrs	r24, 2
     ca2:	d9 cf       	rjmp	.-78     	; 0xc56 <Endpoint_WaitUntilReady+0x2a>
     ca4:	f6 cf       	rjmp	.-20     	; 0xc92 <Endpoint_WaitUntilReady+0x66>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     cb0:	0f 93       	push	r16
     cb2:	1f 93       	push	r17
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     cb8:	0e 94 ad 06 	call	0xd5a	; 0xd5a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     cbc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     cc0:	c8 ed       	ldi	r28, 0xD8	; 216
     cc2:	d0 e0       	ldi	r29, 0x00	; 0
     cc4:	88 81       	ld	r24, Y
     cc6:	8f 77       	andi	r24, 0x7F	; 127
     cc8:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     cca:	88 81       	ld	r24, Y
     ccc:	80 68       	ori	r24, 0x80	; 128
     cce:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cd0:	88 81       	ld	r24, Y
     cd2:	8f 7d       	andi	r24, 0xDF	; 223
     cd4:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cd6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     cd8:	10 92 4b 02 	sts	0x024B, r1
	USB_Device_ConfigurationNumber  = 0;
     cdc:	10 92 47 02 	sts	0x0247, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     ce0:	10 92 49 02 	sts	0x0249, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     ce4:	10 92 48 02 	sts	0x0248, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     ce8:	00 ee       	ldi	r16, 0xE0	; 224
     cea:	10 e0       	ldi	r17, 0x00	; 0
     cec:	f8 01       	movw	r30, r16
     cee:	80 81       	ld	r24, Z
     cf0:	8b 7f       	andi	r24, 0xFB	; 251
     cf2:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     cf4:	88 81       	ld	r24, Y
     cf6:	81 60       	ori	r24, 0x01	; 1
     cf8:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     cfa:	42 e0       	ldi	r20, 0x02	; 2
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 30 05 	call	0xa60	; 0xa60 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     d04:	e1 ee       	ldi	r30, 0xE1	; 225
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8e 7f       	andi	r24, 0xFE	; 254
     d0c:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d0e:	e2 ee       	ldi	r30, 0xE2	; 226
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	81 60       	ori	r24, 0x01	; 1
     d16:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     d18:	80 81       	ld	r24, Z
     d1a:	88 60       	ori	r24, 0x08	; 8
     d1c:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     d1e:	f8 01       	movw	r30, r16
     d20:	80 81       	ld	r24, Z
     d22:	8e 7f       	andi	r24, 0xFE	; 254
     d24:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     d26:	88 81       	ld	r24, Y
     d28:	80 61       	ori	r24, 0x10	; 16
     d2a:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	08 95       	ret

00000d36 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     d36:	e8 ed       	ldi	r30, 0xD8	; 216
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 7e       	andi	r24, 0xEF	; 239
     d3e:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     d40:	e7 ed       	ldi	r30, 0xD7	; 215
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	81 60       	ori	r24, 0x01	; 1
     d48:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     d4a:	84 e0       	ldi	r24, 0x04	; 4
     d4c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	80 93 4a 02 	sts	0x024A, r24

	USB_ResetInterface();
     d54:	0e 94 58 06 	call	0xcb0	; 0xcb0 <USB_ResetInterface>
     d58:	08 95       	ret

00000d5a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     d5a:	e8 ed       	ldi	r30, 0xD8	; 216
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	8e 7f       	andi	r24, 0xFE	; 254
     d62:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d64:	10 92 e2 00 	sts	0x00E2, r1
     d68:	08 95       	ret

00000d6a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d6a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d6e:	10 92 e1 00 	sts	0x00E1, r1
     d72:	08 95       	ret

00000d74 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	2f 93       	push	r18
     d80:	3f 93       	push	r19
     d82:	4f 93       	push	r20
     d84:	5f 93       	push	r21
     d86:	6f 93       	push	r22
     d88:	7f 93       	push	r23
     d8a:	8f 93       	push	r24
     d8c:	9f 93       	push	r25
     d8e:	af 93       	push	r26
     d90:	bf 93       	push	r27
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     d96:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     d9a:	82 ff       	sbrs	r24, 2
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     d9e:	80 91 e2 00 	lds	r24, 0x00E2
     da2:	82 ff       	sbrs	r24, 2
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     da6:	e1 ee       	ldi	r30, 0xE1	; 225
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	8b 7f       	andi	r24, 0xFB	; 251
     dae:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     db0:	0e 94 76 09 	call	0x12ec	; 0x12ec <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     db4:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     db8:	80 ff       	sbrs	r24, 0
     dba:	1f c0       	rjmp	.+62     	; 0xdfa <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     dbc:	80 91 d8 00 	lds	r24, 0x00D8
     dc0:	80 ff       	sbrs	r24, 0
     dc2:	1b c0       	rjmp	.+54     	; 0xdfa <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     dc4:	ea ed       	ldi	r30, 0xDA	; 218
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	8e 7f       	andi	r24, 0xFE	; 254
     dcc:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     dce:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     dd2:	80 ff       	sbrs	r24, 0
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     dd6:	80 e1       	ldi	r24, 0x10	; 16
     dd8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dda:	82 e1       	ldi	r24, 0x12	; 18
     ddc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     dde:	09 b4       	in	r0, 0x29	; 41
     de0:	00 fe       	sbrs	r0, 0
     de2:	fd cf       	rjmp	.-6      	; 0xdde <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	80 93 4b 02 	sts	0x024B, r24
			EVENT_USB_Device_Connect();
     dea:	0e 94 65 09 	call	0x12ca	; 0x12ca <EVENT_USB_Device_Connect>
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     df0:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     df2:	10 92 4b 02 	sts	0x024B, r1
			EVENT_USB_Device_Disconnect();
     df6:	0e 94 66 09 	call	0x12cc	; 0x12cc <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     dfa:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     dfe:	80 ff       	sbrs	r24, 0
     e00:	17 c0       	rjmp	.+46     	; 0xe30 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     e02:	80 91 e2 00 	lds	r24, 0x00E2
     e06:	80 ff       	sbrs	r24, 0
     e08:	13 c0       	rjmp	.+38     	; 0xe30 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e0a:	e2 ee       	ldi	r30, 0xE2	; 226
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8e 7f       	andi	r24, 0xFE	; 254
     e12:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e14:	80 81       	ld	r24, Z
     e16:	80 61       	ori	r24, 0x10	; 16
     e18:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     e1a:	e8 ed       	ldi	r30, 0xD8	; 216
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	80 62       	ori	r24, 0x20	; 32
     e22:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     e24:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     e26:	85 e0       	ldi	r24, 0x05	; 5
     e28:	80 93 4b 02 	sts	0x024B, r24
		EVENT_USB_Device_Suspend();
     e2c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     e30:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     e34:	84 ff       	sbrs	r24, 4
     e36:	30 c0       	rjmp	.+96     	; 0xe98 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     e38:	80 91 e2 00 	lds	r24, 0x00E2
     e3c:	84 ff       	sbrs	r24, 4
     e3e:	2c c0       	rjmp	.+88     	; 0xe98 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     e40:	80 e1       	ldi	r24, 0x10	; 16
     e42:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     e44:	82 e1       	ldi	r24, 0x12	; 18
     e46:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     e48:	09 b4       	in	r0, 0x29	; 41
     e4a:	00 fe       	sbrs	r0, 0
     e4c:	fd cf       	rjmp	.-6      	; 0xe48 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     e4e:	e8 ed       	ldi	r30, 0xD8	; 216
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	8f 7d       	andi	r24, 0xDF	; 223
     e56:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     e58:	e1 ee       	ldi	r30, 0xE1	; 225
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	8f 7e       	andi	r24, 0xEF	; 239
     e60:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     e62:	e2 ee       	ldi	r30, 0xE2	; 226
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	8f 7e       	andi	r24, 0xEF	; 239
     e6a:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     e6c:	80 81       	ld	r24, Z
     e6e:	81 60       	ori	r24, 0x01	; 1
     e70:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     e72:	80 91 47 02 	lds	r24, 0x0247
     e76:	88 23       	and	r24, r24
     e78:	21 f0       	breq	.+8      	; 0xe82 <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
     e7a:	84 e0       	ldi	r24, 0x04	; 4
     e7c:	80 93 4b 02 	sts	0x024B, r24
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e82:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     e86:	88 23       	and	r24, r24
     e88:	14 f4       	brge	.+4      	; 0xe8e <__vector_10+0x11a>
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <__vector_10+0x11c>
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 4b 02 	sts	0x024B, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     e94:	0e 94 ee 08 	call	0x11dc	; 0x11dc <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     e98:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     e9c:	83 ff       	sbrs	r24, 3
     e9e:	20 c0       	rjmp	.+64     	; 0xee0 <__vector_10+0x16c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ea0:	80 91 e2 00 	lds	r24, 0x00E2
     ea4:	83 ff       	sbrs	r24, 3
     ea6:	1c c0       	rjmp	.+56     	; 0xee0 <__vector_10+0x16c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ea8:	e1 ee       	ldi	r30, 0xE1	; 225
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	87 7f       	andi	r24, 0xF7	; 247
     eb0:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	80 93 4b 02 	sts	0x024B, r24
		USB_Device_ConfigurationNumber = 0;
     eb8:	10 92 47 02 	sts	0x0247, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ebc:	80 81       	ld	r24, Z
     ebe:	8e 7f       	andi	r24, 0xFE	; 254
     ec0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     ec2:	e2 ee       	ldi	r30, 0xE2	; 226
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     ecc:	80 81       	ld	r24, Z
     ece:	80 61       	ori	r24, 0x10	; 16
     ed0:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     ed2:	42 e0       	ldi	r20, 0x02	; 2
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	0e 94 30 05 	call	0xa60	; 0xa60 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     edc:	0e 94 ee 08 	call	0x11dc	; 0x11dc <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     ee0:	ff 91       	pop	r31
     ee2:	ef 91       	pop	r30
     ee4:	bf 91       	pop	r27
     ee6:	af 91       	pop	r26
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	7f 91       	pop	r23
     eee:	6f 91       	pop	r22
     ef0:	5f 91       	pop	r21
     ef2:	4f 91       	pop	r20
     ef4:	3f 91       	pop	r19
     ef6:	2f 91       	pop	r18
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	0f 90       	pop	r0
     efe:	1f 90       	pop	r1
     f00:	18 95       	reti

00000f02 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	aa 97       	sbiw	r28, 0x2a	; 42
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	ec e4       	ldi	r30, 0x4C	; 76
     f1c:	f2 e0       	ldi	r31, 0x02	; 2
     f1e:	84 e5       	ldi	r24, 0x54	; 84
     f20:	92 e0       	ldi	r25, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f22:	a1 ef       	ldi	r26, 0xF1	; 241
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	2c 91       	ld	r18, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     f28:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     f2a:	e8 17       	cp	r30, r24
     f2c:	f9 07       	cpc	r31, r25
     f2e:	d9 f7       	brne	.-10     	; 0xf26 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     f30:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f34:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     f38:	83 ff       	sbrs	r24, 3
     f3a:	2b c1       	rjmp	.+598    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     f3c:	30 91 4c 02 	lds	r19, 0x024C

		switch (USB_ControlRequest.bRequest)
     f40:	20 91 4d 02 	lds	r18, 0x024D
     f44:	82 2f       	mov	r24, r18
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	8a 30       	cpi	r24, 0x0A	; 10
     f4a:	91 05       	cpc	r25, r1
     f4c:	08 f0       	brcs	.+2      	; 0xf50 <USB_Device_ProcessControlRequest+0x4e>
     f4e:	21 c1       	rjmp	.+578    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
     f50:	fc 01       	movw	r30, r24
     f52:	ea 5a       	subi	r30, 0xAA	; 170
     f54:	ff 4f       	sbci	r31, 0xFF	; 255
     f56:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f5a:	30 38       	cpi	r19, 0x80	; 128
     f5c:	21 f0       	breq	.+8      	; 0xf66 <USB_Device_ProcessControlRequest+0x64>
     f5e:	32 38       	cpi	r19, 0x82	; 130
     f60:	09 f0       	breq	.+2      	; 0xf64 <USB_Device_ProcessControlRequest+0x62>
     f62:	17 c1       	rjmp	.+558    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
     f64:	08 c0       	rjmp	.+16     	; 0xf76 <USB_Device_ProcessControlRequest+0x74>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     f66:	80 91 48 02 	lds	r24, 0x0248
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     f6a:	90 91 49 02 	lds	r25, 0x0249
     f6e:	99 23       	and	r25, r25
     f70:	71 f0       	breq	.+28     	; 0xf8e <USB_Device_ProcessControlRequest+0x8c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     f72:	82 60       	ori	r24, 0x02	; 2
     f74:	0c c0       	rjmp	.+24     	; 0xf8e <USB_Device_ProcessControlRequest+0x8c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f76:	80 91 50 02 	lds	r24, 0x0250
     f7a:	8f 70       	andi	r24, 0x0F	; 15
     f7c:	e9 ee       	ldi	r30, 0xE9	; 233
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f82:	80 91 eb 00 	lds	r24, 0x00EB
     f86:	85 fb       	bst	r24, 5
     f88:	88 27       	eor	r24, r24
     f8a:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f8c:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f8e:	e8 ee       	ldi	r30, 0xE8	; 232
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	90 81       	ld	r25, Z
     f94:	97 7f       	andi	r25, 0xF7	; 247
     f96:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f98:	a1 ef       	ldi	r26, 0xF1	; 241
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
     f9e:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fa0:	80 81       	ld	r24, Z
     fa2:	8e 77       	andi	r24, 0x7E	; 126
     fa4:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     fa6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>
     faa:	f3 c0       	rjmp	.+486    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     fac:	33 23       	and	r19, r19
     fae:	09 f4       	brne	.+2      	; 0xfb2 <USB_Device_ProcessControlRequest+0xb0>
     fb0:	ff c0       	rjmp	.+510    	; 0x11b0 <USB_Device_ProcessControlRequest+0x2ae>
     fb2:	32 30       	cpi	r19, 0x02	; 2
     fb4:	09 f0       	breq	.+2      	; 0xfb8 <USB_Device_ProcessControlRequest+0xb6>
     fb6:	ed c0       	rjmp	.+474    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
     fb8:	00 c1       	rjmp	.+512    	; 0x11ba <USB_Device_ProcessControlRequest+0x2b8>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	23 30       	cpi	r18, 0x03	; 3
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <USB_Device_ProcessControlRequest+0xc0>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	80 93 49 02 	sts	0x0249, r24
     fc6:	28 c0       	rjmp	.+80     	; 0x1018 <USB_Device_ProcessControlRequest+0x116>
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     fc8:	20 91 50 02 	lds	r18, 0x0250
     fcc:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     fce:	09 f4       	brne	.+2      	; 0xfd2 <USB_Device_ProcessControlRequest+0xd0>
     fd0:	e0 c0       	rjmp	.+448    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fd2:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     fd6:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     fda:	80 ff       	sbrs	r24, 0
     fdc:	1d c0       	rjmp	.+58     	; 0x1018 <USB_Device_ProcessControlRequest+0x116>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     fde:	80 91 4d 02 	lds	r24, 0x024D
     fe2:	83 30       	cpi	r24, 0x03	; 3
     fe4:	31 f4       	brne	.+12     	; 0xff2 <USB_Device_ProcessControlRequest+0xf0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     fe6:	eb ee       	ldi	r30, 0xEB	; 235
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	80 62       	ori	r24, 0x20	; 32
     fee:	80 83       	st	Z, r24
     ff0:	13 c0       	rjmp	.+38     	; 0x1018 <USB_Device_ProcessControlRequest+0x116>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     ff2:	eb ee       	ldi	r30, 0xEB	; 235
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 61       	ori	r24, 0x10	; 16
     ffa:	80 83       	st	Z, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <USB_Device_ProcessControlRequest+0x104>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	2a 95       	dec	r18
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <USB_Device_ProcessControlRequest+0x100>
    100a:	aa ee       	ldi	r26, 0xEA	; 234
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8c 93       	st	X, r24
				UERST = 0;
    1010:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1012:	80 81       	ld	r24, Z
    1014:	88 60       	ori	r24, 0x08	; 8
    1016:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1018:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    101c:	e8 ee       	ldi	r30, 0xE8	; 232
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	87 7f       	andi	r24, 0xF7	; 247
    1024:	80 83       	st	Z, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1026:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>
    102a:	b3 c0       	rjmp	.+358    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    102c:	31 11       	cpse	r19, r1
    102e:	b1 c0       	rjmp	.+354    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1030:	10 91 4e 02 	lds	r17, 0x024E
    1034:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1036:	e3 ee       	ldi	r30, 0xE3	; 227
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	80 78       	andi	r24, 0x80	; 128
    103e:	81 2b       	or	r24, r17
    1040:	80 83       	st	Z, r24
    1042:	e8 ee       	ldi	r30, 0xE8	; 232
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	87 7f       	andi	r24, 0xF7	; 247
    104a:	80 83       	st	Z, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    104c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1050:	e8 ee       	ldi	r30, 0xE8	; 232
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    1056:	80 ff       	sbrs	r24, 0
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <USB_Device_ProcessControlRequest+0x152>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    105a:	e3 ee       	ldi	r30, 0xE3	; 227
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	80 68       	ori	r24, 0x80	; 128
    1062:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1064:	11 23       	and	r17, r17
    1066:	11 f0       	breq	.+4      	; 0x106c <USB_Device_ProcessControlRequest+0x16a>
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	01 c0       	rjmp	.+2      	; 0x106e <USB_Device_ProcessControlRequest+0x16c>
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	80 93 4b 02 	sts	0x024B, r24
    1072:	8f c0       	rjmp	.+286    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1074:	30 58       	subi	r19, 0x80	; 128
    1076:	32 30       	cpi	r19, 0x02	; 2
    1078:	08 f0       	brcs	.+2      	; 0x107c <USB_Device_ProcessControlRequest+0x17a>
    107a:	8b c0       	rjmp	.+278    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    107c:	80 91 4e 02 	lds	r24, 0x024E
    1080:	90 91 4f 02 	lds	r25, 0x024F
    1084:	8c 3d       	cpi	r24, 0xDC	; 220
    1086:	23 e0       	ldi	r18, 0x03	; 3
    1088:	92 07       	cpc	r25, r18
    108a:	a1 f5       	brne	.+104    	; 0x10f4 <USB_Device_ProcessControlRequest+0x1f2>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    108c:	83 e0       	ldi	r24, 0x03	; 3
    108e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1090:	8a e2       	ldi	r24, 0x2A	; 42
    1092:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1094:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1096:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1098:	de 01       	movw	r26, r28
    109a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    109c:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    109e:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    10a0:	41 e2       	ldi	r20, 0x21	; 33
    10a2:	e3 2f       	mov	r30, r19
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	40 93 57 00 	sts	0x0057, r20
    10aa:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    10ac:	20 ff       	sbrs	r18, 0
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <USB_Device_ProcessControlRequest+0x1b4>
					{
						SerialByte >>= 4;
    10b0:	82 95       	swap	r24
    10b2:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    10b4:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    10b6:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    10b8:	8a 30       	cpi	r24, 0x0A	; 10
    10ba:	18 f0       	brcs	.+6      	; 0x10c2 <USB_Device_ProcessControlRequest+0x1c0>
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	c7 96       	adiw	r24, 0x37	; 55
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <USB_Device_ProcessControlRequest+0x1c4>
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	c0 96       	adiw	r24, 0x30	; 48
    10c6:	8d 93       	st	X+, r24
    10c8:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    10ca:	2f 5f       	subi	r18, 0xFF	; 255
    10cc:	24 31       	cpi	r18, 0x14	; 20
    10ce:	49 f7       	brne	.-46     	; 0x10a2 <USB_Device_ProcessControlRequest+0x1a0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    10d0:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10d2:	08 ee       	ldi	r16, 0xE8	; 232
    10d4:	10 e0       	ldi	r17, 0x00	; 0
    10d6:	f8 01       	movw	r30, r16
    10d8:	80 81       	ld	r24, Z
    10da:	87 7f       	andi	r24, 0xF7	; 247
    10dc:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    10de:	6a e2       	ldi	r22, 0x2A	; 42
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	0e 94 a8 03 	call	0x750	; 0x750 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10ea:	f8 01       	movw	r30, r16
    10ec:	80 81       	ld	r24, Z
    10ee:	8b 77       	andi	r24, 0x7B	; 123
    10f0:	80 83       	st	Z, r24
    10f2:	4f c0       	rjmp	.+158    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    10f4:	ae 01       	movw	r20, r28
    10f6:	4f 5f       	subi	r20, 0xFF	; 255
    10f8:	5f 4f       	sbci	r21, 0xFF	; 255
    10fa:	60 91 50 02 	lds	r22, 0x0250
    10fe:	0e 94 cf 00 	call	0x19e	; 0x19e <CALLBACK_USB_GetDescriptor>
    1102:	00 97       	sbiw	r24, 0x00	; 0
    1104:	09 f4       	brne	.+2      	; 0x1108 <USB_Device_ProcessControlRequest+0x206>
    1106:	45 c0       	rjmp	.+138    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1108:	08 ee       	ldi	r16, 0xE8	; 232
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	f8 01       	movw	r30, r16
    110e:	20 81       	ld	r18, Z
    1110:	27 7f       	andi	r18, 0xF7	; 247
    1112:	20 83       	st	Z, r18
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1114:	bc 01       	movw	r22, r24
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	0e 94 ab 04 	call	0x956	; 0x956 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    111e:	f8 01       	movw	r30, r16
    1120:	80 81       	ld	r24, Z
    1122:	8b 77       	andi	r24, 0x7B	; 123
    1124:	80 83       	st	Z, r24
    1126:	35 c0       	rjmp	.+106    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1128:	30 38       	cpi	r19, 0x80	; 128
    112a:	99 f5       	brne	.+102    	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    112c:	e8 ee       	ldi	r30, 0xE8	; 232
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	87 7f       	andi	r24, 0xF7	; 247
    1134:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1136:	80 91 47 02 	lds	r24, 0x0247
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    113a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    113e:	80 81       	ld	r24, Z
    1140:	8e 77       	andi	r24, 0x7E	; 126
    1142:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    1144:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>
    1148:	24 c0       	rjmp	.+72     	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    114a:	31 11       	cpse	r19, r1
    114c:	22 c0       	rjmp	.+68     	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    114e:	80 91 4e 02 	lds	r24, 0x024E
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	f0 f4       	brcc	.+60     	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1156:	e8 ee       	ldi	r30, 0xE8	; 232
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	87 7f       	andi	r24, 0xF7	; 247
    115e:	80 83       	st	Z, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1160:	80 91 4e 02 	lds	r24, 0x024E
    1164:	80 93 47 02 	sts	0x0247, r24

	Endpoint_ClearStatusStage();
    1168:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    116c:	80 91 47 02 	lds	r24, 0x0247
    1170:	88 23       	and	r24, r24
    1172:	21 f0       	breq	.+8      	; 0x117c <USB_Device_ProcessControlRequest+0x27a>
	  USB_DeviceState = DEVICE_STATE_Configured;
    1174:	84 e0       	ldi	r24, 0x04	; 4
    1176:	80 93 4b 02 	sts	0x024B, r24
    117a:	09 c0       	rjmp	.+18     	; 0x118e <USB_Device_ProcessControlRequest+0x28c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    117c:	80 91 e3 00 	lds	r24, 0x00E3
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1180:	88 23       	and	r24, r24
    1182:	14 f4       	brge	.+4      	; 0x1188 <USB_Device_ProcessControlRequest+0x286>
    1184:	84 e0       	ldi	r24, 0x04	; 4
    1186:	01 c0       	rjmp	.+2      	; 0x118a <USB_Device_ProcessControlRequest+0x288>
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	80 93 4b 02 	sts	0x024B, r24

	EVENT_USB_Device_ConfigurationChanged();
    118e:	0e 94 67 09 	call	0x12ce	; 0x12ce <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1192:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1196:	83 ff       	sbrs	r24, 3
    1198:	16 c0       	rjmp	.+44     	; 0x11c6 <USB_Device_ProcessControlRequest+0x2c4>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    119a:	e8 ee       	ldi	r30, 0xE8	; 232
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	87 7f       	andi	r24, 0xF7	; 247
    11a2:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    11a4:	eb ee       	ldi	r30, 0xEB	; 235
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	80 62       	ori	r24, 0x20	; 32
    11ac:	80 83       	st	Z, r24
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <USB_Device_ProcessControlRequest+0x2c4>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    11b0:	80 91 4e 02 	lds	r24, 0x024E
    11b4:	81 30       	cpi	r24, 0x01	; 1
    11b6:	69 f7       	brne	.-38     	; 0x1192 <USB_Device_ProcessControlRequest+0x290>
    11b8:	00 cf       	rjmp	.-512    	; 0xfba <USB_Device_ProcessControlRequest+0xb8>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    11ba:	80 91 4e 02 	lds	r24, 0x024E
    11be:	88 23       	and	r24, r24
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <USB_Device_ProcessControlRequest+0x2c2>
    11c2:	02 cf       	rjmp	.-508    	; 0xfc8 <USB_Device_ProcessControlRequest+0xc6>
    11c4:	29 cf       	rjmp	.-430    	; 0x1018 <USB_Device_ProcessControlRequest+0x116>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    11c6:	aa 96       	adiw	r28, 0x2a	; 42
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	08 95       	ret

000011dc <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    11dc:	08 95       	ret

000011de <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11de:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    11e0:	80 91 4b 02 	lds	r24, 0x024B
    11e4:	88 23       	and	r24, r24
    11e6:	a9 f0       	breq	.+42     	; 0x1212 <USB_USBTask+0x34>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11e8:	c0 91 e9 00 	lds	r28, 0x00E9
    11ec:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11ee:	80 91 ec 00 	lds	r24, 0x00EC
    11f2:	80 ff       	sbrs	r24, 0
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <USB_USBTask+0x1c>
    11f6:	80 e8       	ldi	r24, 0x80	; 128
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <USB_USBTask+0x1e>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11fc:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11fe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1202:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1206:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1208:	0e 94 81 07 	call	0xf02	; 0xf02 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    120c:	cf 70       	andi	r28, 0x0F	; 15
    120e:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <usart_transmit_byte_val>:
/**
 * transmit byte via pass by value
 * @param data data byte to be sent
 */
void usart_transmit_byte_val(uint8_t data){
	 while (!(UCSR1A & (1<<UDRE1)));
    1216:	e8 ec       	ldi	r30, 0xC8	; 200
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	90 81       	ld	r25, Z
    121c:	95 ff       	sbrs	r25, 5
    121e:	fd cf       	rjmp	.-6      	; 0x121a <usart_transmit_byte_val+0x4>
	 UDR1 = data;
    1220:	80 93 ce 00 	sts	0x00CE, r24
    1224:	08 95       	ret

00001226 <uart_putchar>:

/**
 * putchar for streaming file out
 */
int uart_putchar(char ch, FILE *stream)
{
    1226:	cf 93       	push	r28
    1228:	c8 2f       	mov	r28, r24
	if(ch=='\n')
    122a:	8a 30       	cpi	r24, 0x0A	; 10
    122c:	19 f4       	brne	.+6      	; 0x1234 <uart_putchar+0xe>
	uart_putchar('\r',stream);
    122e:	8d e0       	ldi	r24, 0x0D	; 13
    1230:	0e 94 13 09 	call	0x1226	; 0x1226 <uart_putchar>
	stdio_serial_send_function((uint8_t) ch);
    1234:	8c 2f       	mov	r24, r28
    1236:	0e 94 0b 09 	call	0x1216	; 0x1216 <usart_transmit_byte_val>
	return 0;
}
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <usart_receive_byte_ref>:
/**
 * receive byte via reference
 * @param data address of data byte into which the data shall be recieved
 */
void usart_receive_byte_ref(uint8_t *data){
	 while (!(UCSR1A & (1<<RXC1)));
    1242:	e8 ec       	ldi	r30, 0xC8	; 200
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	20 81       	ld	r18, Z
    1248:	22 23       	and	r18, r18
    124a:	ec f7       	brge	.-6      	; 0x1246 <usart_receive_byte_ref+0x4>
	 *data = UDR1;
    124c:	20 91 ce 00 	lds	r18, 0x00CE
    1250:	fc 01       	movw	r30, r24
    1252:	20 83       	st	Z, r18
    1254:	08 95       	ret

00001256 <uart_getchar>:
/**
 * get char for streaming file in
 */
int uart_getchar(FILE *stream)
{
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	1f 92       	push	r1
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	8c 01       	movw	r16, r24
	char ch;
	stdio_serial_receive_function( (uint8_t *) &ch);
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 21 09 	call	0x1242	; 0x1242 <usart_receive_byte_ref>
	
	/* Echo the output back to the terminal */
	uart_putchar(ch,stream);
    126e:	b8 01       	movw	r22, r16
    1270:	89 81       	ldd	r24, Y+1	; 0x01
    1272:	0e 94 13 09 	call	0x1226	; 0x1226 <uart_putchar>

	return ch;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
}
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	0f 90       	pop	r0
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	08 95       	ret

00001286 <stdio_serial_initialize>:
/**
 * initializing the stdio file stream over uart
 */
void stdio_serial_initialize()
{
	stdout = stdin = &uart_str;
    1286:	80 e1       	ldi	r24, 0x10	; 16
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	90 93 55 02 	sts	0x0255, r25
    128e:	80 93 54 02 	sts	0x0254, r24
    1292:	90 93 57 02 	sts	0x0257, r25
    1296:	80 93 56 02 	sts	0x0256, r24
    129a:	08 95       	ret

0000129c <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    129c:	84 b7       	in	r24, 0x34	; 52
    129e:	87 7f       	andi	r24, 0xF7	; 247
    12a0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    12a2:	88 e1       	ldi	r24, 0x18	; 24
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	80 93 60 00 	sts	0x0060, r24
    12ac:	10 92 60 00 	sts	0x0060, r1
    12b0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	80 e8       	ldi	r24, 0x80	; 128
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	80 93 61 00 	sts	0x0061, r24
    12be:	90 93 61 00 	sts	0x0061, r25
    12c2:	0f be       	out	0x3f, r0	; 63
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
#endif

	/* Hardware Initialization */
	LEDs_Init();
	USB_Init();
    12c4:	0e 94 9b 06 	call	0xd36	; 0xd36 <USB_Init>
    12c8:	08 95       	ret

000012ca <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
    12ca:	08 95       	ret

000012cc <EVENT_USB_Device_Disconnect>:
	
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
    12cc:	08 95       	ret

000012ce <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Generic_HID_Interface);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <HID_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    12d6:	e2 ee       	ldi	r30, 0xE2	; 226
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	84 60       	ori	r24, 0x04	; 4
    12de:	80 83       	st	Z, r24
    12e0:	08 95       	ret

000012e2 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Generic_HID_Interface);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	91 e0       	ldi	r25, 0x01	; 1
    12e6:	0e 94 1f 01 	call	0x23e	; 0x23e <HID_Device_ProcessControlRequest>
    12ea:	08 95       	ret

000012ec <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    12ec:	80 91 0e 01 	lds	r24, 0x010E
    12f0:	90 91 0f 01 	lds	r25, 0x010F
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	29 f0       	breq	.+10     	; 0x1302 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	90 93 0f 01 	sts	0x010F, r25
    12fe:	80 93 0e 01 	sts	0x010E, r24
    1302:	08 95       	ret

00001304 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	e9 01       	movw	r28, r18

	uint8_t* Data        = (uint8_t*)ReportData;
	//uint8_t  CurrLEDMask = LEDs_GetLEDs();
	
	Data[0] = x;	
    130e:	80 91 46 02 	lds	r24, 0x0246
    1312:	88 83       	st	Y, r24
	printf("creating report LOL\n\r");
    1314:	8e e1       	ldi	r24, 0x1E	; 30
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	9f 93       	push	r25
    131a:	8f 93       	push	r24
    131c:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
	printf("Data[0] : %x \n\r",Data[0]);
    1320:	88 81       	ld	r24, Y
    1322:	1f 92       	push	r1
    1324:	8f 93       	push	r24
    1326:	84 e3       	ldi	r24, 0x34	; 52
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	9f 93       	push	r25
    132c:	8f 93       	push	r24
    132e:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
	printf("Data[1] : %x \n\r",Data[1]);
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	1f 92       	push	r1
    1336:	8f 93       	push	r24
    1338:	84 e4       	ldi	r24, 0x44	; 68
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	9f 93       	push	r25
    133e:	8f 93       	push	r24
    1340:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
	printf("Data[2] : %x \n\r",Data[2]);
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	1f 92       	push	r1
    1348:	8f 93       	push	r24
    134a:	84 e5       	ldi	r24, 0x54	; 84
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	9f 93       	push	r25
    1350:	8f 93       	push	r24
    1352:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
	printf("Data[3] : %x \n\r",Data[3]);
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	1f 92       	push	r1
    135a:	8f 93       	push	r24
    135c:	84 e6       	ldi	r24, 0x64	; 100
    135e:	91 e0       	ldi	r25, 0x01	; 1
    1360:	9f 93       	push	r25
    1362:	8f 93       	push	r24
    1364:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
// 	Data[0] = ((CurrLEDMask & LEDS_LED1) ? 1 : 0);
// 	Data[1] = ((CurrLEDMask & LEDS_LED2) ? 1 : 0);
// 	Data[2] = ((CurrLEDMask & LEDS_LED3) ? 1 : 0);
// 	Data[3] = ((CurrLEDMask & LEDS_LED4) ? 1 : 0);

	*ReportSize = GENERIC_REPORT_SIZE;
    1368:	88 e0       	ldi	r24, 0x08	; 8
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	f8 01       	movw	r30, r16
    136e:	91 83       	std	Z+1, r25	; 0x01
    1370:	80 83       	st	Z, r24
	return false;
    1372:	8d b7       	in	r24, 0x3d	; 61
    1374:	9e b7       	in	r25, 0x3e	; 62
    1376:	42 96       	adiw	r24, 0x12	; 18
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	9e bf       	out	0x3e, r25	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	8d bf       	out	0x3d, r24	; 61
}
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	08 95       	ret

0000138e <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	e9 01       	movw	r28, r18
	printf("you received some shit\n\r");
    1394:	84 e7       	ldi	r24, 0x74	; 116
    1396:	91 e0       	ldi	r25, 0x01	; 1
    1398:	9f 93       	push	r25
    139a:	8f 93       	push	r24
    139c:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>

	uint8_t* Data       = (uint8_t*)ReportData;
	uint8_t  NewLEDMask = LEDS_NO_LEDS;

	printf("your report Data[0] is %X\n\r",Data[0]);
    13a0:	88 81       	ld	r24, Y
    13a2:	1f 92       	push	r1
    13a4:	8f 93       	push	r24
    13a6:	8d e8       	ldi	r24, 0x8D	; 141
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	9f 93       	push	r25
    13ac:	8f 93       	push	r24
    13ae:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
	printf("your report Data[1] is %X\n\r",Data[1]);
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	1f 92       	push	r1
    13b6:	8f 93       	push	r24
    13b8:	89 ea       	ldi	r24, 0xA9	; 169
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	9f 93       	push	r25
    13be:	8f 93       	push	r24
    13c0:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
	printf("your report Data[2] is %X\n\r",Data[2]);
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	1f 92       	push	r1
    13c8:	8f 93       	push	r24
    13ca:	85 ec       	ldi	r24, 0xC5	; 197
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	9f 93       	push	r25
    13d0:	8f 93       	push	r24
    13d2:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
	printf("your report Data[3] is %X\n\r",Data[3]);
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	1f 92       	push	r1
    13da:	8f 93       	push	r24
    13dc:	81 ee       	ldi	r24, 0xE1	; 225
    13de:	91 e0       	ldi	r25, 0x01	; 1
    13e0:	9f 93       	push	r25
    13e2:	8f 93       	push	r24
    13e4:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>


	if (Data[0])
	  NewLEDMask |= LEDS_LED1;

	if(Data[0]&0x01)
    13e8:	88 81       	ld	r24, Y
    13ea:	2d b7       	in	r18, 0x3d	; 61
    13ec:	3e b7       	in	r19, 0x3e	; 62
    13ee:	2e 5e       	subi	r18, 0xEE	; 238
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	f8 94       	cli
    13f6:	3e bf       	out	0x3e, r19	; 62
    13f8:	0f be       	out	0x3f, r0	; 63
    13fa:	2d bf       	out	0x3d, r18	; 61
    13fc:	80 ff       	sbrs	r24, 0
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <CALLBACK_HID_Device_ProcessHIDReport+0x76>
	{
		PORTC &= ~(1<<7);
    1400:	47 98       	cbi	0x08, 7	; 8
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <CALLBACK_HID_Device_ProcessHIDReport+0x78>
	}
	else
	{
		PORTC |= (1<<7);
    1404:	47 9a       	sbi	0x08, 7	; 8

	if (Data[3])
	  NewLEDMask |= LEDS_LED4;

	LEDs_SetAllLEDs(NewLEDMask);
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <main>:
 * initialize the usart baud rate
 * @param baud_rate the baud rate for teh usart module
 */
void usart_set_baud_rate(unsigned long baud_rate){
	unsigned int ubrr = (F_CPU/16/baud_rate)-1;
	UBRR1H = (unsigned char)(ubrr>>8);
    140c:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = (unsigned char)ubrr;
    1410:	87 e6       	ldi	r24, 0x67	; 103
    1412:	80 93 cc 00 	sts	0x00CC, r24
 * @param stop_bits	0->1 stop bit, 1-> 2 stop bits
 * @param char_size	0->5-bit, 1->6-bit, 2->7-bit, 3->8-bit,7->9-bit
 * @param pol		0->tx or rising, rx on falling, 1-> tx on falling, rx on rising
 */
void usart_setup(uint8_t mode, uint8_t parity, uint8_t stop_bits, uint8_t char_size,uint8_t pol){
	 UCSR1C =  (mode<<6) | (parity<<4) | (stop_bits<<3) |(char_size<<1) | (pol<<0);
    1416:	86 e0       	ldi	r24, 0x06	; 6
    1418:	80 93 ca 00 	sts	0x00CA, r24

/**
 * enable the USART tx and rx
 */
void usart_enable(){
	 UCSR1B = (1<<RXEN1)|(1<<TXEN1);
    141c:	88 e1       	ldi	r24, 0x18	; 24
    141e:	80 93 c9 00 	sts	0x00C9, r24
{
	
	usart_set_baud_rate(9600);
	usart_setup(0,0,0,3,0);
	usart_enable();
	stdio_serial_initialize();
    1422:	0e 94 43 09 	call	0x1286	; 0x1286 <stdio_serial_initialize>
	
	printf("this is a test message to mark the start up of the USB testing\n\r");
    1426:	8d ef       	ldi	r24, 0xFD	; 253
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	9f 93       	push	r25
    142c:	8f 93       	push	r24
    142e:	0e 94 4f 0a 	call	0x149e	; 0x149e <printf>
	
	DDRC |= (1<<7);
    1432:	3f 9a       	sbi	0x07, 7	; 7
	
	SetupHardware();
    1434:	0e 94 4e 09 	call	0x129c	; 0x129c <SetupHardware>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1438:	78 94       	sei
				__builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				sei();
				#endif

				GCC_MEMORY_BARRIER();
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
	
    {
        //TODO:: Please write your application code 
		HID_Device_USBTask(&Generic_HID_Interface);
		USB_USBTask();
		x ^= 1;
    143e:	c1 e0       	ldi	r28, 0x01	; 1
	GlobalInterruptEnable();
    while(1)
	
    {
        //TODO:: Please write your application code 
		HID_Device_USBTask(&Generic_HID_Interface);
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	91 e0       	ldi	r25, 0x01	; 1
    1444:	0e 94 86 02 	call	0x50c	; 0x50c <HID_Device_USBTask>
		USB_USBTask();
    1448:	0e 94 ef 08 	call	0x11de	; 0x11de <USB_USBTask>
		x ^= 1;
    144c:	80 91 46 02 	lds	r24, 0x0246
    1450:	8c 27       	eor	r24, r28
    1452:	80 93 46 02 	sts	0x0246, r24
    1456:	f4 cf       	rjmp	.-24     	; 0x1440 <main+0x34>

00001458 <__tablejump2__>:
    1458:	ee 0f       	add	r30, r30
    145a:	ff 1f       	adc	r31, r31

0000145c <__tablejump__>:
    145c:	05 90       	lpm	r0, Z+
    145e:	f4 91       	lpm	r31, Z
    1460:	e0 2d       	mov	r30, r0
    1462:	09 94       	ijmp

00001464 <memcmp>:
    1464:	fb 01       	movw	r30, r22
    1466:	dc 01       	movw	r26, r24
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <memcmp+0xe>
    146a:	8d 91       	ld	r24, X+
    146c:	01 90       	ld	r0, Z+
    146e:	80 19       	sub	r24, r0
    1470:	21 f4       	brne	.+8      	; 0x147a <memcmp+0x16>
    1472:	41 50       	subi	r20, 0x01	; 1
    1474:	50 40       	sbci	r21, 0x00	; 0
    1476:	c8 f7       	brcc	.-14     	; 0x146a <memcmp+0x6>
    1478:	88 1b       	sub	r24, r24
    147a:	99 0b       	sbc	r25, r25
    147c:	08 95       	ret

0000147e <memcpy>:
    147e:	fb 01       	movw	r30, r22
    1480:	dc 01       	movw	r26, r24
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <memcpy+0xa>
    1484:	01 90       	ld	r0, Z+
    1486:	0d 92       	st	X+, r0
    1488:	41 50       	subi	r20, 0x01	; 1
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	d8 f7       	brcc	.-10     	; 0x1484 <memcpy+0x6>
    148e:	08 95       	ret

00001490 <memset>:
    1490:	dc 01       	movw	r26, r24
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <memset+0x6>
    1494:	6d 93       	st	X+, r22
    1496:	41 50       	subi	r20, 0x01	; 1
    1498:	50 40       	sbci	r21, 0x00	; 0
    149a:	e0 f7       	brcc	.-8      	; 0x1494 <memset+0x4>
    149c:	08 95       	ret

0000149e <printf>:
    149e:	a0 e0       	ldi	r26, 0x00	; 0
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e5 e5       	ldi	r30, 0x55	; 85
    14a4:	fa e0       	ldi	r31, 0x0A	; 10
    14a6:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__prologue_saves__+0x20>
    14aa:	fe 01       	movw	r30, r28
    14ac:	35 96       	adiw	r30, 0x05	; 5
    14ae:	61 91       	ld	r22, Z+
    14b0:	71 91       	ld	r23, Z+
    14b2:	af 01       	movw	r20, r30
    14b4:	80 91 56 02 	lds	r24, 0x0256
    14b8:	90 91 57 02 	lds	r25, 0x0257
    14bc:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <vfprintf>
    14c0:	e2 e0       	ldi	r30, 0x02	; 2
    14c2:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__epilogue_restores__+0x20>

000014c6 <vfprintf>:
    14c6:	ac e0       	ldi	r26, 0x0C	; 12
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	e9 e6       	ldi	r30, 0x69	; 105
    14cc:	fa e0       	ldi	r31, 0x0A	; 10
    14ce:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__prologue_saves__>
    14d2:	7c 01       	movw	r14, r24
    14d4:	6b 01       	movw	r12, r22
    14d6:	8a 01       	movw	r16, r20
    14d8:	fc 01       	movw	r30, r24
    14da:	17 82       	std	Z+7, r1	; 0x07
    14dc:	16 82       	std	Z+6, r1	; 0x06
    14de:	83 81       	ldd	r24, Z+3	; 0x03
    14e0:	81 ff       	sbrs	r24, 1
    14e2:	bd c1       	rjmp	.+890    	; 0x185e <vfprintf+0x398>
    14e4:	ce 01       	movw	r24, r28
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	4c 01       	movw	r8, r24
    14ea:	f7 01       	movw	r30, r14
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	f6 01       	movw	r30, r12
    14f0:	93 fd       	sbrc	r25, 3
    14f2:	85 91       	lpm	r24, Z+
    14f4:	93 ff       	sbrs	r25, 3
    14f6:	81 91       	ld	r24, Z+
    14f8:	6f 01       	movw	r12, r30
    14fa:	88 23       	and	r24, r24
    14fc:	09 f4       	brne	.+2      	; 0x1500 <vfprintf+0x3a>
    14fe:	ab c1       	rjmp	.+854    	; 0x1856 <vfprintf+0x390>
    1500:	85 32       	cpi	r24, 0x25	; 37
    1502:	39 f4       	brne	.+14     	; 0x1512 <vfprintf+0x4c>
    1504:	93 fd       	sbrc	r25, 3
    1506:	85 91       	lpm	r24, Z+
    1508:	93 ff       	sbrs	r25, 3
    150a:	81 91       	ld	r24, Z+
    150c:	6f 01       	movw	r12, r30
    150e:	85 32       	cpi	r24, 0x25	; 37
    1510:	29 f4       	brne	.+10     	; 0x151c <vfprintf+0x56>
    1512:	b7 01       	movw	r22, r14
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    151a:	e7 cf       	rjmp	.-50     	; 0x14ea <vfprintf+0x24>
    151c:	51 2c       	mov	r5, r1
    151e:	31 2c       	mov	r3, r1
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	20 32       	cpi	r18, 0x20	; 32
    1524:	a0 f4       	brcc	.+40     	; 0x154e <vfprintf+0x88>
    1526:	8b 32       	cpi	r24, 0x2B	; 43
    1528:	69 f0       	breq	.+26     	; 0x1544 <vfprintf+0x7e>
    152a:	30 f4       	brcc	.+12     	; 0x1538 <vfprintf+0x72>
    152c:	80 32       	cpi	r24, 0x20	; 32
    152e:	59 f0       	breq	.+22     	; 0x1546 <vfprintf+0x80>
    1530:	83 32       	cpi	r24, 0x23	; 35
    1532:	69 f4       	brne	.+26     	; 0x154e <vfprintf+0x88>
    1534:	20 61       	ori	r18, 0x10	; 16
    1536:	2c c0       	rjmp	.+88     	; 0x1590 <vfprintf+0xca>
    1538:	8d 32       	cpi	r24, 0x2D	; 45
    153a:	39 f0       	breq	.+14     	; 0x154a <vfprintf+0x84>
    153c:	80 33       	cpi	r24, 0x30	; 48
    153e:	39 f4       	brne	.+14     	; 0x154e <vfprintf+0x88>
    1540:	21 60       	ori	r18, 0x01	; 1
    1542:	26 c0       	rjmp	.+76     	; 0x1590 <vfprintf+0xca>
    1544:	22 60       	ori	r18, 0x02	; 2
    1546:	24 60       	ori	r18, 0x04	; 4
    1548:	23 c0       	rjmp	.+70     	; 0x1590 <vfprintf+0xca>
    154a:	28 60       	ori	r18, 0x08	; 8
    154c:	21 c0       	rjmp	.+66     	; 0x1590 <vfprintf+0xca>
    154e:	27 fd       	sbrc	r18, 7
    1550:	27 c0       	rjmp	.+78     	; 0x15a0 <vfprintf+0xda>
    1552:	30 ed       	ldi	r19, 0xD0	; 208
    1554:	38 0f       	add	r19, r24
    1556:	3a 30       	cpi	r19, 0x0A	; 10
    1558:	78 f4       	brcc	.+30     	; 0x1578 <vfprintf+0xb2>
    155a:	26 ff       	sbrs	r18, 6
    155c:	06 c0       	rjmp	.+12     	; 0x156a <vfprintf+0xa4>
    155e:	fa e0       	ldi	r31, 0x0A	; 10
    1560:	5f 9e       	mul	r5, r31
    1562:	30 0d       	add	r19, r0
    1564:	11 24       	eor	r1, r1
    1566:	53 2e       	mov	r5, r19
    1568:	13 c0       	rjmp	.+38     	; 0x1590 <vfprintf+0xca>
    156a:	8a e0       	ldi	r24, 0x0A	; 10
    156c:	38 9e       	mul	r3, r24
    156e:	30 0d       	add	r19, r0
    1570:	11 24       	eor	r1, r1
    1572:	33 2e       	mov	r3, r19
    1574:	20 62       	ori	r18, 0x20	; 32
    1576:	0c c0       	rjmp	.+24     	; 0x1590 <vfprintf+0xca>
    1578:	8e 32       	cpi	r24, 0x2E	; 46
    157a:	21 f4       	brne	.+8      	; 0x1584 <vfprintf+0xbe>
    157c:	26 fd       	sbrc	r18, 6
    157e:	6b c1       	rjmp	.+726    	; 0x1856 <vfprintf+0x390>
    1580:	20 64       	ori	r18, 0x40	; 64
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <vfprintf+0xca>
    1584:	8c 36       	cpi	r24, 0x6C	; 108
    1586:	11 f4       	brne	.+4      	; 0x158c <vfprintf+0xc6>
    1588:	20 68       	ori	r18, 0x80	; 128
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0xca>
    158c:	88 36       	cpi	r24, 0x68	; 104
    158e:	41 f4       	brne	.+16     	; 0x15a0 <vfprintf+0xda>
    1590:	f6 01       	movw	r30, r12
    1592:	93 fd       	sbrc	r25, 3
    1594:	85 91       	lpm	r24, Z+
    1596:	93 ff       	sbrs	r25, 3
    1598:	81 91       	ld	r24, Z+
    159a:	6f 01       	movw	r12, r30
    159c:	81 11       	cpse	r24, r1
    159e:	c1 cf       	rjmp	.-126    	; 0x1522 <vfprintf+0x5c>
    15a0:	98 2f       	mov	r25, r24
    15a2:	9f 7d       	andi	r25, 0xDF	; 223
    15a4:	95 54       	subi	r25, 0x45	; 69
    15a6:	93 30       	cpi	r25, 0x03	; 3
    15a8:	28 f4       	brcc	.+10     	; 0x15b4 <vfprintf+0xee>
    15aa:	0c 5f       	subi	r16, 0xFC	; 252
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	ff e3       	ldi	r31, 0x3F	; 63
    15b0:	f9 83       	std	Y+1, r31	; 0x01
    15b2:	0d c0       	rjmp	.+26     	; 0x15ce <vfprintf+0x108>
    15b4:	83 36       	cpi	r24, 0x63	; 99
    15b6:	31 f0       	breq	.+12     	; 0x15c4 <vfprintf+0xfe>
    15b8:	83 37       	cpi	r24, 0x73	; 115
    15ba:	71 f0       	breq	.+28     	; 0x15d8 <vfprintf+0x112>
    15bc:	83 35       	cpi	r24, 0x53	; 83
    15be:	09 f0       	breq	.+2      	; 0x15c2 <vfprintf+0xfc>
    15c0:	5b c0       	rjmp	.+182    	; 0x1678 <vfprintf+0x1b2>
    15c2:	22 c0       	rjmp	.+68     	; 0x1608 <vfprintf+0x142>
    15c4:	f8 01       	movw	r30, r16
    15c6:	80 81       	ld	r24, Z
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	0e 5f       	subi	r16, 0xFE	; 254
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
    15ce:	44 24       	eor	r4, r4
    15d0:	43 94       	inc	r4
    15d2:	51 2c       	mov	r5, r1
    15d4:	54 01       	movw	r10, r8
    15d6:	15 c0       	rjmp	.+42     	; 0x1602 <vfprintf+0x13c>
    15d8:	38 01       	movw	r6, r16
    15da:	f2 e0       	ldi	r31, 0x02	; 2
    15dc:	6f 0e       	add	r6, r31
    15de:	71 1c       	adc	r7, r1
    15e0:	f8 01       	movw	r30, r16
    15e2:	a0 80       	ld	r10, Z
    15e4:	b1 80       	ldd	r11, Z+1	; 0x01
    15e6:	26 ff       	sbrs	r18, 6
    15e8:	03 c0       	rjmp	.+6      	; 0x15f0 <vfprintf+0x12a>
    15ea:	65 2d       	mov	r22, r5
    15ec:	70 e0       	ldi	r23, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <vfprintf+0x12e>
    15f0:	6f ef       	ldi	r22, 0xFF	; 255
    15f2:	7f ef       	ldi	r23, 0xFF	; 255
    15f4:	c5 01       	movw	r24, r10
    15f6:	2c 87       	std	Y+12, r18	; 0x0c
    15f8:	0e 94 40 0c 	call	0x1880	; 0x1880 <strnlen>
    15fc:	2c 01       	movw	r4, r24
    15fe:	83 01       	movw	r16, r6
    1600:	2c 85       	ldd	r18, Y+12	; 0x0c
    1602:	2f 77       	andi	r18, 0x7F	; 127
    1604:	22 2e       	mov	r2, r18
    1606:	17 c0       	rjmp	.+46     	; 0x1636 <vfprintf+0x170>
    1608:	38 01       	movw	r6, r16
    160a:	f2 e0       	ldi	r31, 0x02	; 2
    160c:	6f 0e       	add	r6, r31
    160e:	71 1c       	adc	r7, r1
    1610:	f8 01       	movw	r30, r16
    1612:	a0 80       	ld	r10, Z
    1614:	b1 80       	ldd	r11, Z+1	; 0x01
    1616:	26 ff       	sbrs	r18, 6
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <vfprintf+0x15a>
    161a:	65 2d       	mov	r22, r5
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vfprintf+0x15e>
    1620:	6f ef       	ldi	r22, 0xFF	; 255
    1622:	7f ef       	ldi	r23, 0xFF	; 255
    1624:	c5 01       	movw	r24, r10
    1626:	2c 87       	std	Y+12, r18	; 0x0c
    1628:	0e 94 35 0c 	call	0x186a	; 0x186a <strnlen_P>
    162c:	2c 01       	movw	r4, r24
    162e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1630:	20 68       	ori	r18, 0x80	; 128
    1632:	22 2e       	mov	r2, r18
    1634:	83 01       	movw	r16, r6
    1636:	23 fc       	sbrc	r2, 3
    1638:	1b c0       	rjmp	.+54     	; 0x1670 <vfprintf+0x1aa>
    163a:	83 2d       	mov	r24, r3
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	48 16       	cp	r4, r24
    1640:	59 06       	cpc	r5, r25
    1642:	b0 f4       	brcc	.+44     	; 0x1670 <vfprintf+0x1aa>
    1644:	b7 01       	movw	r22, r14
    1646:	80 e2       	ldi	r24, 0x20	; 32
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    164e:	3a 94       	dec	r3
    1650:	f4 cf       	rjmp	.-24     	; 0x163a <vfprintf+0x174>
    1652:	f5 01       	movw	r30, r10
    1654:	27 fc       	sbrc	r2, 7
    1656:	85 91       	lpm	r24, Z+
    1658:	27 fe       	sbrs	r2, 7
    165a:	81 91       	ld	r24, Z+
    165c:	5f 01       	movw	r10, r30
    165e:	b7 01       	movw	r22, r14
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    1666:	31 10       	cpse	r3, r1
    1668:	3a 94       	dec	r3
    166a:	f1 e0       	ldi	r31, 0x01	; 1
    166c:	4f 1a       	sub	r4, r31
    166e:	51 08       	sbc	r5, r1
    1670:	41 14       	cp	r4, r1
    1672:	51 04       	cpc	r5, r1
    1674:	71 f7       	brne	.-36     	; 0x1652 <vfprintf+0x18c>
    1676:	e5 c0       	rjmp	.+458    	; 0x1842 <vfprintf+0x37c>
    1678:	84 36       	cpi	r24, 0x64	; 100
    167a:	11 f0       	breq	.+4      	; 0x1680 <vfprintf+0x1ba>
    167c:	89 36       	cpi	r24, 0x69	; 105
    167e:	39 f5       	brne	.+78     	; 0x16ce <vfprintf+0x208>
    1680:	f8 01       	movw	r30, r16
    1682:	27 ff       	sbrs	r18, 7
    1684:	07 c0       	rjmp	.+14     	; 0x1694 <vfprintf+0x1ce>
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	0c 5f       	subi	r16, 0xFC	; 252
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	08 c0       	rjmp	.+16     	; 0x16a4 <vfprintf+0x1de>
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	88 27       	eor	r24, r24
    169a:	77 fd       	sbrc	r23, 7
    169c:	80 95       	com	r24
    169e:	98 2f       	mov	r25, r24
    16a0:	0e 5f       	subi	r16, 0xFE	; 254
    16a2:	1f 4f       	sbci	r17, 0xFF	; 255
    16a4:	2f 76       	andi	r18, 0x6F	; 111
    16a6:	b2 2e       	mov	r11, r18
    16a8:	97 ff       	sbrs	r25, 7
    16aa:	09 c0       	rjmp	.+18     	; 0x16be <vfprintf+0x1f8>
    16ac:	90 95       	com	r25
    16ae:	80 95       	com	r24
    16b0:	70 95       	com	r23
    16b2:	61 95       	neg	r22
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	20 68       	ori	r18, 0x80	; 128
    16bc:	b2 2e       	mov	r11, r18
    16be:	2a e0       	ldi	r18, 0x0A	; 10
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	a4 01       	movw	r20, r8
    16c4:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__ultoa_invert>
    16c8:	a8 2e       	mov	r10, r24
    16ca:	a8 18       	sub	r10, r8
    16cc:	44 c0       	rjmp	.+136    	; 0x1756 <vfprintf+0x290>
    16ce:	85 37       	cpi	r24, 0x75	; 117
    16d0:	29 f4       	brne	.+10     	; 0x16dc <vfprintf+0x216>
    16d2:	2f 7e       	andi	r18, 0xEF	; 239
    16d4:	b2 2e       	mov	r11, r18
    16d6:	2a e0       	ldi	r18, 0x0A	; 10
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	25 c0       	rjmp	.+74     	; 0x1726 <vfprintf+0x260>
    16dc:	f2 2f       	mov	r31, r18
    16de:	f9 7f       	andi	r31, 0xF9	; 249
    16e0:	bf 2e       	mov	r11, r31
    16e2:	8f 36       	cpi	r24, 0x6F	; 111
    16e4:	c1 f0       	breq	.+48     	; 0x1716 <vfprintf+0x250>
    16e6:	18 f4       	brcc	.+6      	; 0x16ee <vfprintf+0x228>
    16e8:	88 35       	cpi	r24, 0x58	; 88
    16ea:	79 f0       	breq	.+30     	; 0x170a <vfprintf+0x244>
    16ec:	b4 c0       	rjmp	.+360    	; 0x1856 <vfprintf+0x390>
    16ee:	80 37       	cpi	r24, 0x70	; 112
    16f0:	19 f0       	breq	.+6      	; 0x16f8 <vfprintf+0x232>
    16f2:	88 37       	cpi	r24, 0x78	; 120
    16f4:	21 f0       	breq	.+8      	; 0x16fe <vfprintf+0x238>
    16f6:	af c0       	rjmp	.+350    	; 0x1856 <vfprintf+0x390>
    16f8:	2f 2f       	mov	r18, r31
    16fa:	20 61       	ori	r18, 0x10	; 16
    16fc:	b2 2e       	mov	r11, r18
    16fe:	b4 fe       	sbrs	r11, 4
    1700:	0d c0       	rjmp	.+26     	; 0x171c <vfprintf+0x256>
    1702:	8b 2d       	mov	r24, r11
    1704:	84 60       	ori	r24, 0x04	; 4
    1706:	b8 2e       	mov	r11, r24
    1708:	09 c0       	rjmp	.+18     	; 0x171c <vfprintf+0x256>
    170a:	24 ff       	sbrs	r18, 4
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <vfprintf+0x25c>
    170e:	9f 2f       	mov	r25, r31
    1710:	96 60       	ori	r25, 0x06	; 6
    1712:	b9 2e       	mov	r11, r25
    1714:	06 c0       	rjmp	.+12     	; 0x1722 <vfprintf+0x25c>
    1716:	28 e0       	ldi	r18, 0x08	; 8
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <vfprintf+0x260>
    171c:	20 e1       	ldi	r18, 0x10	; 16
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <vfprintf+0x260>
    1722:	20 e1       	ldi	r18, 0x10	; 16
    1724:	32 e0       	ldi	r19, 0x02	; 2
    1726:	f8 01       	movw	r30, r16
    1728:	b7 fe       	sbrs	r11, 7
    172a:	07 c0       	rjmp	.+14     	; 0x173a <vfprintf+0x274>
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	0c 5f       	subi	r16, 0xFC	; 252
    1736:	1f 4f       	sbci	r17, 0xFF	; 255
    1738:	06 c0       	rjmp	.+12     	; 0x1746 <vfprintf+0x280>
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 5f       	subi	r16, 0xFE	; 254
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	a4 01       	movw	r20, r8
    1748:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__ultoa_invert>
    174c:	a8 2e       	mov	r10, r24
    174e:	a8 18       	sub	r10, r8
    1750:	fb 2d       	mov	r31, r11
    1752:	ff 77       	andi	r31, 0x7F	; 127
    1754:	bf 2e       	mov	r11, r31
    1756:	b6 fe       	sbrs	r11, 6
    1758:	0b c0       	rjmp	.+22     	; 0x1770 <vfprintf+0x2aa>
    175a:	2b 2d       	mov	r18, r11
    175c:	2e 7f       	andi	r18, 0xFE	; 254
    175e:	a5 14       	cp	r10, r5
    1760:	50 f4       	brcc	.+20     	; 0x1776 <vfprintf+0x2b0>
    1762:	b4 fe       	sbrs	r11, 4
    1764:	0a c0       	rjmp	.+20     	; 0x177a <vfprintf+0x2b4>
    1766:	b2 fc       	sbrc	r11, 2
    1768:	08 c0       	rjmp	.+16     	; 0x177a <vfprintf+0x2b4>
    176a:	2b 2d       	mov	r18, r11
    176c:	2e 7e       	andi	r18, 0xEE	; 238
    176e:	05 c0       	rjmp	.+10     	; 0x177a <vfprintf+0x2b4>
    1770:	7a 2c       	mov	r7, r10
    1772:	2b 2d       	mov	r18, r11
    1774:	03 c0       	rjmp	.+6      	; 0x177c <vfprintf+0x2b6>
    1776:	7a 2c       	mov	r7, r10
    1778:	01 c0       	rjmp	.+2      	; 0x177c <vfprintf+0x2b6>
    177a:	75 2c       	mov	r7, r5
    177c:	24 ff       	sbrs	r18, 4
    177e:	0d c0       	rjmp	.+26     	; 0x179a <vfprintf+0x2d4>
    1780:	fe 01       	movw	r30, r28
    1782:	ea 0d       	add	r30, r10
    1784:	f1 1d       	adc	r31, r1
    1786:	80 81       	ld	r24, Z
    1788:	80 33       	cpi	r24, 0x30	; 48
    178a:	11 f4       	brne	.+4      	; 0x1790 <vfprintf+0x2ca>
    178c:	29 7e       	andi	r18, 0xE9	; 233
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <vfprintf+0x2dc>
    1790:	22 ff       	sbrs	r18, 2
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <vfprintf+0x2da>
    1794:	73 94       	inc	r7
    1796:	73 94       	inc	r7
    1798:	04 c0       	rjmp	.+8      	; 0x17a2 <vfprintf+0x2dc>
    179a:	82 2f       	mov	r24, r18
    179c:	86 78       	andi	r24, 0x86	; 134
    179e:	09 f0       	breq	.+2      	; 0x17a2 <vfprintf+0x2dc>
    17a0:	73 94       	inc	r7
    17a2:	23 fd       	sbrc	r18, 3
    17a4:	13 c0       	rjmp	.+38     	; 0x17cc <vfprintf+0x306>
    17a6:	20 ff       	sbrs	r18, 0
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <vfprintf+0x2f0>
    17aa:	5a 2c       	mov	r5, r10
    17ac:	73 14       	cp	r7, r3
    17ae:	18 f4       	brcc	.+6      	; 0x17b6 <vfprintf+0x2f0>
    17b0:	53 0c       	add	r5, r3
    17b2:	57 18       	sub	r5, r7
    17b4:	73 2c       	mov	r7, r3
    17b6:	73 14       	cp	r7, r3
    17b8:	68 f4       	brcc	.+26     	; 0x17d4 <vfprintf+0x30e>
    17ba:	b7 01       	movw	r22, r14
    17bc:	80 e2       	ldi	r24, 0x20	; 32
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	2c 87       	std	Y+12, r18	; 0x0c
    17c2:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    17c6:	73 94       	inc	r7
    17c8:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ca:	f5 cf       	rjmp	.-22     	; 0x17b6 <vfprintf+0x2f0>
    17cc:	73 14       	cp	r7, r3
    17ce:	10 f4       	brcc	.+4      	; 0x17d4 <vfprintf+0x30e>
    17d0:	37 18       	sub	r3, r7
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <vfprintf+0x310>
    17d4:	31 2c       	mov	r3, r1
    17d6:	24 ff       	sbrs	r18, 4
    17d8:	12 c0       	rjmp	.+36     	; 0x17fe <vfprintf+0x338>
    17da:	b7 01       	movw	r22, r14
    17dc:	80 e3       	ldi	r24, 0x30	; 48
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	2c 87       	std	Y+12, r18	; 0x0c
    17e2:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    17e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    17e8:	22 ff       	sbrs	r18, 2
    17ea:	17 c0       	rjmp	.+46     	; 0x181a <vfprintf+0x354>
    17ec:	21 ff       	sbrs	r18, 1
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <vfprintf+0x330>
    17f0:	88 e5       	ldi	r24, 0x58	; 88
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <vfprintf+0x334>
    17f6:	88 e7       	ldi	r24, 0x78	; 120
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	b7 01       	movw	r22, r14
    17fc:	0c c0       	rjmp	.+24     	; 0x1816 <vfprintf+0x350>
    17fe:	82 2f       	mov	r24, r18
    1800:	86 78       	andi	r24, 0x86	; 134
    1802:	59 f0       	breq	.+22     	; 0x181a <vfprintf+0x354>
    1804:	21 fd       	sbrc	r18, 1
    1806:	02 c0       	rjmp	.+4      	; 0x180c <vfprintf+0x346>
    1808:	80 e2       	ldi	r24, 0x20	; 32
    180a:	01 c0       	rjmp	.+2      	; 0x180e <vfprintf+0x348>
    180c:	8b e2       	ldi	r24, 0x2B	; 43
    180e:	27 fd       	sbrc	r18, 7
    1810:	8d e2       	ldi	r24, 0x2D	; 45
    1812:	b7 01       	movw	r22, r14
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    181a:	a5 14       	cp	r10, r5
    181c:	38 f4       	brcc	.+14     	; 0x182c <vfprintf+0x366>
    181e:	b7 01       	movw	r22, r14
    1820:	80 e3       	ldi	r24, 0x30	; 48
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    1828:	5a 94       	dec	r5
    182a:	f7 cf       	rjmp	.-18     	; 0x181a <vfprintf+0x354>
    182c:	aa 94       	dec	r10
    182e:	f4 01       	movw	r30, r8
    1830:	ea 0d       	add	r30, r10
    1832:	f1 1d       	adc	r31, r1
    1834:	80 81       	ld	r24, Z
    1836:	b7 01       	movw	r22, r14
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    183e:	a1 10       	cpse	r10, r1
    1840:	f5 cf       	rjmp	.-22     	; 0x182c <vfprintf+0x366>
    1842:	33 20       	and	r3, r3
    1844:	09 f4       	brne	.+2      	; 0x1848 <vfprintf+0x382>
    1846:	51 ce       	rjmp	.-862    	; 0x14ea <vfprintf+0x24>
    1848:	b7 01       	movw	r22, r14
    184a:	80 e2       	ldi	r24, 0x20	; 32
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <fputc>
    1852:	3a 94       	dec	r3
    1854:	f6 cf       	rjmp	.-20     	; 0x1842 <vfprintf+0x37c>
    1856:	f7 01       	movw	r30, r14
    1858:	86 81       	ldd	r24, Z+6	; 0x06
    185a:	97 81       	ldd	r25, Z+7	; 0x07
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <vfprintf+0x39c>
    185e:	8f ef       	ldi	r24, 0xFF	; 255
    1860:	9f ef       	ldi	r25, 0xFF	; 255
    1862:	2c 96       	adiw	r28, 0x0c	; 12
    1864:	e2 e1       	ldi	r30, 0x12	; 18
    1866:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__epilogue_restores__>

0000186a <strnlen_P>:
    186a:	fc 01       	movw	r30, r24
    186c:	05 90       	lpm	r0, Z+
    186e:	61 50       	subi	r22, 0x01	; 1
    1870:	70 40       	sbci	r23, 0x00	; 0
    1872:	01 10       	cpse	r0, r1
    1874:	d8 f7       	brcc	.-10     	; 0x186c <strnlen_P+0x2>
    1876:	80 95       	com	r24
    1878:	90 95       	com	r25
    187a:	8e 0f       	add	r24, r30
    187c:	9f 1f       	adc	r25, r31
    187e:	08 95       	ret

00001880 <strnlen>:
    1880:	fc 01       	movw	r30, r24
    1882:	61 50       	subi	r22, 0x01	; 1
    1884:	70 40       	sbci	r23, 0x00	; 0
    1886:	01 90       	ld	r0, Z+
    1888:	01 10       	cpse	r0, r1
    188a:	d8 f7       	brcc	.-10     	; 0x1882 <strnlen+0x2>
    188c:	80 95       	com	r24
    188e:	90 95       	com	r25
    1890:	8e 0f       	add	r24, r30
    1892:	9f 1f       	adc	r25, r31
    1894:	08 95       	ret

00001896 <fputc>:
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	18 2f       	mov	r17, r24
    18a0:	09 2f       	mov	r16, r25
    18a2:	eb 01       	movw	r28, r22
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	81 fd       	sbrc	r24, 1
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <fputc+0x1a>
    18aa:	8f ef       	ldi	r24, 0xFF	; 255
    18ac:	9f ef       	ldi	r25, 0xFF	; 255
    18ae:	20 c0       	rjmp	.+64     	; 0x18f0 <fputc+0x5a>
    18b0:	82 ff       	sbrs	r24, 2
    18b2:	10 c0       	rjmp	.+32     	; 0x18d4 <fputc+0x3e>
    18b4:	4e 81       	ldd	r20, Y+6	; 0x06
    18b6:	5f 81       	ldd	r21, Y+7	; 0x07
    18b8:	2c 81       	ldd	r18, Y+4	; 0x04
    18ba:	3d 81       	ldd	r19, Y+5	; 0x05
    18bc:	42 17       	cp	r20, r18
    18be:	53 07       	cpc	r21, r19
    18c0:	7c f4       	brge	.+30     	; 0x18e0 <fputc+0x4a>
    18c2:	e8 81       	ld	r30, Y
    18c4:	f9 81       	ldd	r31, Y+1	; 0x01
    18c6:	9f 01       	movw	r18, r30
    18c8:	2f 5f       	subi	r18, 0xFF	; 255
    18ca:	3f 4f       	sbci	r19, 0xFF	; 255
    18cc:	39 83       	std	Y+1, r19	; 0x01
    18ce:	28 83       	st	Y, r18
    18d0:	10 83       	st	Z, r17
    18d2:	06 c0       	rjmp	.+12     	; 0x18e0 <fputc+0x4a>
    18d4:	e8 85       	ldd	r30, Y+8	; 0x08
    18d6:	f9 85       	ldd	r31, Y+9	; 0x09
    18d8:	81 2f       	mov	r24, r17
    18da:	09 95       	icall
    18dc:	89 2b       	or	r24, r25
    18de:	29 f7       	brne	.-54     	; 0x18aa <fputc+0x14>
    18e0:	2e 81       	ldd	r18, Y+6	; 0x06
    18e2:	3f 81       	ldd	r19, Y+7	; 0x07
    18e4:	2f 5f       	subi	r18, 0xFF	; 255
    18e6:	3f 4f       	sbci	r19, 0xFF	; 255
    18e8:	3f 83       	std	Y+7, r19	; 0x07
    18ea:	2e 83       	std	Y+6, r18	; 0x06
    18ec:	81 2f       	mov	r24, r17
    18ee:	90 2f       	mov	r25, r16
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	1f 91       	pop	r17
    18f6:	0f 91       	pop	r16
    18f8:	08 95       	ret

000018fa <__ultoa_invert>:
    18fa:	fa 01       	movw	r30, r20
    18fc:	aa 27       	eor	r26, r26
    18fe:	28 30       	cpi	r18, 0x08	; 8
    1900:	51 f1       	breq	.+84     	; 0x1956 <__ultoa_invert+0x5c>
    1902:	20 31       	cpi	r18, 0x10	; 16
    1904:	81 f1       	breq	.+96     	; 0x1966 <__ultoa_invert+0x6c>
    1906:	e8 94       	clt
    1908:	6f 93       	push	r22
    190a:	6e 7f       	andi	r22, 0xFE	; 254
    190c:	6e 5f       	subi	r22, 0xFE	; 254
    190e:	7f 4f       	sbci	r23, 0xFF	; 255
    1910:	8f 4f       	sbci	r24, 0xFF	; 255
    1912:	9f 4f       	sbci	r25, 0xFF	; 255
    1914:	af 4f       	sbci	r26, 0xFF	; 255
    1916:	b1 e0       	ldi	r27, 0x01	; 1
    1918:	3e d0       	rcall	.+124    	; 0x1996 <__ultoa_invert+0x9c>
    191a:	b4 e0       	ldi	r27, 0x04	; 4
    191c:	3c d0       	rcall	.+120    	; 0x1996 <__ultoa_invert+0x9c>
    191e:	67 0f       	add	r22, r23
    1920:	78 1f       	adc	r23, r24
    1922:	89 1f       	adc	r24, r25
    1924:	9a 1f       	adc	r25, r26
    1926:	a1 1d       	adc	r26, r1
    1928:	68 0f       	add	r22, r24
    192a:	79 1f       	adc	r23, r25
    192c:	8a 1f       	adc	r24, r26
    192e:	91 1d       	adc	r25, r1
    1930:	a1 1d       	adc	r26, r1
    1932:	6a 0f       	add	r22, r26
    1934:	71 1d       	adc	r23, r1
    1936:	81 1d       	adc	r24, r1
    1938:	91 1d       	adc	r25, r1
    193a:	a1 1d       	adc	r26, r1
    193c:	20 d0       	rcall	.+64     	; 0x197e <__ultoa_invert+0x84>
    193e:	09 f4       	brne	.+2      	; 0x1942 <__ultoa_invert+0x48>
    1940:	68 94       	set
    1942:	3f 91       	pop	r19
    1944:	2a e0       	ldi	r18, 0x0A	; 10
    1946:	26 9f       	mul	r18, r22
    1948:	11 24       	eor	r1, r1
    194a:	30 19       	sub	r19, r0
    194c:	30 5d       	subi	r19, 0xD0	; 208
    194e:	31 93       	st	Z+, r19
    1950:	de f6       	brtc	.-74     	; 0x1908 <__ultoa_invert+0xe>
    1952:	cf 01       	movw	r24, r30
    1954:	08 95       	ret
    1956:	46 2f       	mov	r20, r22
    1958:	47 70       	andi	r20, 0x07	; 7
    195a:	40 5d       	subi	r20, 0xD0	; 208
    195c:	41 93       	st	Z+, r20
    195e:	b3 e0       	ldi	r27, 0x03	; 3
    1960:	0f d0       	rcall	.+30     	; 0x1980 <__ultoa_invert+0x86>
    1962:	c9 f7       	brne	.-14     	; 0x1956 <__ultoa_invert+0x5c>
    1964:	f6 cf       	rjmp	.-20     	; 0x1952 <__ultoa_invert+0x58>
    1966:	46 2f       	mov	r20, r22
    1968:	4f 70       	andi	r20, 0x0F	; 15
    196a:	40 5d       	subi	r20, 0xD0	; 208
    196c:	4a 33       	cpi	r20, 0x3A	; 58
    196e:	18 f0       	brcs	.+6      	; 0x1976 <__ultoa_invert+0x7c>
    1970:	49 5d       	subi	r20, 0xD9	; 217
    1972:	31 fd       	sbrc	r19, 1
    1974:	40 52       	subi	r20, 0x20	; 32
    1976:	41 93       	st	Z+, r20
    1978:	02 d0       	rcall	.+4      	; 0x197e <__ultoa_invert+0x84>
    197a:	a9 f7       	brne	.-22     	; 0x1966 <__ultoa_invert+0x6c>
    197c:	ea cf       	rjmp	.-44     	; 0x1952 <__ultoa_invert+0x58>
    197e:	b4 e0       	ldi	r27, 0x04	; 4
    1980:	a6 95       	lsr	r26
    1982:	97 95       	ror	r25
    1984:	87 95       	ror	r24
    1986:	77 95       	ror	r23
    1988:	67 95       	ror	r22
    198a:	ba 95       	dec	r27
    198c:	c9 f7       	brne	.-14     	; 0x1980 <__ultoa_invert+0x86>
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	61 05       	cpc	r22, r1
    1992:	71 05       	cpc	r23, r1
    1994:	08 95       	ret
    1996:	9b 01       	movw	r18, r22
    1998:	ac 01       	movw	r20, r24
    199a:	0a 2e       	mov	r0, r26
    199c:	06 94       	lsr	r0
    199e:	57 95       	ror	r21
    19a0:	47 95       	ror	r20
    19a2:	37 95       	ror	r19
    19a4:	27 95       	ror	r18
    19a6:	ba 95       	dec	r27
    19a8:	c9 f7       	brne	.-14     	; 0x199c <__ultoa_invert+0xa2>
    19aa:	62 0f       	add	r22, r18
    19ac:	73 1f       	adc	r23, r19
    19ae:	84 1f       	adc	r24, r20
    19b0:	95 1f       	adc	r25, r21
    19b2:	a0 1d       	adc	r26, r0
    19b4:	08 95       	ret

000019b6 <__prologue_saves__>:
    19b6:	2f 92       	push	r2
    19b8:	3f 92       	push	r3
    19ba:	4f 92       	push	r4
    19bc:	5f 92       	push	r5
    19be:	6f 92       	push	r6
    19c0:	7f 92       	push	r7
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	ca 1b       	sub	r28, r26
    19e0:	db 0b       	sbc	r29, r27
    19e2:	0f b6       	in	r0, 0x3f	; 63
    19e4:	f8 94       	cli
    19e6:	de bf       	out	0x3e, r29	; 62
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	cd bf       	out	0x3d, r28	; 61
    19ec:	09 94       	ijmp

000019ee <__epilogue_restores__>:
    19ee:	2a 88       	ldd	r2, Y+18	; 0x12
    19f0:	39 88       	ldd	r3, Y+17	; 0x11
    19f2:	48 88       	ldd	r4, Y+16	; 0x10
    19f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    19f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    19f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    19fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    19fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    19fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a00:	b9 84       	ldd	r11, Y+9	; 0x09
    1a02:	c8 84       	ldd	r12, Y+8	; 0x08
    1a04:	df 80       	ldd	r13, Y+7	; 0x07
    1a06:	ee 80       	ldd	r14, Y+6	; 0x06
    1a08:	fd 80       	ldd	r15, Y+5	; 0x05
    1a0a:	0c 81       	ldd	r16, Y+4	; 0x04
    1a0c:	1b 81       	ldd	r17, Y+3	; 0x03
    1a0e:	aa 81       	ldd	r26, Y+2	; 0x02
    1a10:	b9 81       	ldd	r27, Y+1	; 0x01
    1a12:	ce 0f       	add	r28, r30
    1a14:	d1 1d       	adc	r29, r1
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	ed 01       	movw	r28, r26
    1a22:	08 95       	ret

00001a24 <_exit>:
    1a24:	f8 94       	cli

00001a26 <__stop_program>:
    1a26:	ff cf       	rjmp	.-2      	; 0x1a26 <__stop_program>
